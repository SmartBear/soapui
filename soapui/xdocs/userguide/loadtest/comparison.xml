<?xml version="1.0"?>
<document>
    <properties>
        <title>JMeter and soapUI comparison</title>
    </properties>
    <body>
		<section name="JMeter and soapUI Performance Comparison">
		<p>This document aims mainly to compare the results obtained with the popular 
		<a target="_new" href="http://jakarta.apache.org/jmeter/">JMeter</a> tool 
		from Apache with those obtained with soapUI and to show and discuss some of the differences in the results 
		obtained with the 2 tools. If you think or know we are doing 
		something wrong in our tests or conclusions, don't hesitate to contact us and we will try to sort 
		things out :-)</p>
		
		<p>A feature comparison will between the two tools will not be done in any detail, generally
		one could say that JMeter is much better at load-testing in general (ie HTTP, JDBC, JMS, etc, etc) while 
		soapUI is better at load-testing web services specifically. Most things you can do with soapUI can 
		probably be done in JMeter, but since JMeter has a more "generic" approach to almost everything, it 
		won't always be as "intuitive" as it is (or at least should be) in soapUI. On the other hand, many things 
		that can be done in JMeter are not possible in soapUI (for example distributed load testing).</p>

		<p>In general one can say that Load Testing Web Services is extremely difficult since so many factors can affect the 
		measured results; network latency, host load, hardware, jvms, etc... Both soapUI and JMeter will be a "victim" to 
		this, although soapUI has slightly more options to control exactly what and how results are to be measured (in the
		TestCase options dialog).</p>
		
		<subsection name="Comparison Setup">
		<p>The setup for the comparison is a simple request to a web service running locally under an improved version 
		of JBoss 4.0.3SP1 and running a slightly modified sample Web Service from the jbossws 4.0.3 samples. A simple 
		request will be run 5000 times under 4 different loads; 1 thread, 5 threads, 10 threads and 25 threads all using 
		the <a href="configuration.html#LoadTest_Simple_Strategy">simple Load Test strategy</a> with no delay, the TestCase Options are configured 
		to include only request write times, and will be run with and without closing connections after each request.</p>
		<p align="center"><img src="images/comparison1.gif" alt="Load Test Tool Comparison Setup"/></p>
		
		<p>This is in JMeter is configured equivalently using one ThreadGroup with no ramp-up and varying the loop count 
		and number of threads accordingly; 1/5000, 5/1000, 10/500 and 25/200. The "WebService(SOAP) Request" sampler is used 
		and configured as shown below. An "Aggregate Report" listener is configured for collecting the results.</p>
		<p align="center"><img src="images/comparison2.gif" alt="JMeter Configuration"/></p>
		
		<p>My laptop is running WinXP SP2 on a Pentium M 1.8 with 1Gb of RAM. JRE 1.5.0_06 is used for running JBoss, JMeter
		and soapUI.</p>
		
		</subsection>
		
		<subsection name="Results">
		<p>The table shows the results, for each test the average and TPS times are shown, (*) tests are run without closing connections</p>
		<table><tr><th>Threads</th><th>jmeter</th><th>SoapUI</th><th>SoapUI (*)</th><th>SoapUI cmdline</th><th>SoapUI cmdline (*)</th></tr>
		<tr><td>1</td><td>8 ms, 105 TPS</td><td>6.78 ms, 147 TPS</td><td>10.7 ms, 94 TPS</td><td>5.75 ms, 174 TPS</td><td>10 ms, 99 TPS</td></tr>
		<tr><td>5</td><td>43 ms, 110 TPS</td><td>38.7 ms, 128 TPS</td><td>23.7 ms, 211 TPS</td><td>30.4 ms, 164 TPS</td><td>24 ms, 210 TPS</td></tr>
		<tr><td>10</td><td>86 ms, 112 TPS</td><td>82 ms, 122 TPS</td><td>46.5 ms, 215 TPS</td><td>61 ms, 164 TPS</td><td>38 ms, 262 TPS</td></tr>
		<tr><td>25</td><td>214 ms, 114 TPS</td><td>204 ms, 123 TPS</td><td>124 ms, 202 TPS</td><td>159 ms, 157 TPS</td><td>95 ms, 263 TPS</td></tr>
		</table>
		<p>This can be plotted as follows:</p>
		<p align="center"><img src="images/comparison5.gif" alt="Load Test Tool Comparison Graph"/></p>
		
		<p>As can be seen in the graph and numbers, soapUI consistently gives a higher TPS value than JMeter, except when reusing
		connections and running only one thread. This may be a bit surprising, evidently it is faster for HttpClient and the JVM
		to create new connections than to pool existing ones.</p>
		<p>The biggest difference between the two tools can be seen when switching to connection-reuse and running from the 
		command-line. This is expected, connection reuse should have a big
		impact when running many threads, and running from the command-line uses no UI resources at all.</p>
		<p>One could argue that closing connections after each request is a more realistic scenario for
		web services that serve a large number of different clients, for example an online weather service. Web Services running
		internally in a SOA may be more likely to serve a smaller number of clients, so these could be tested with connection
		reuse enabled.</p>
		<p>Looking through the JMeter sources, it seems as if JMeter uses HTTP 1.0 and does not maintain any 
		internal connection pool for Web Service requests. Also, it uses <code>System.currentTimeMillis()</code> for measuring
		elapsed time instead of the <code>System.nanoTime()</code> feature available in Java 1.5 and used by soapUI.</p>
		
		</subsection>
		
		<subsection name="Further Analysis">
		<p>Since the above results indicate an improved result when reusing connections, I ran a LoadTest in soapUI
		using the "Threads" strategy increasing the number of threads from 1 to 25 over a period of 250 seconds, both 
		with and without connection reuse. The graphs below show the results:</p>
		<p>First without connection reuse (click on image for full-size):</p>
		<p align="center"><a href="images/comparison3.gif" alt="SoapUI Graph without Connection reuse"><img width="70%" height="70%" src="images/comparison3.gif"/></a></p>
		<p>This confirms the previous results; TPS does not vary much when increasing the number of threads, the average
		request time "takes" the entire increased load.</p>
		<p>And then with connection reuse (click on image for full-size):</p>
		<p align="center"><a href="images/comparison4.gif" alt="SoapUI Graph without Connection reuse"><img width="70%" height="70%" src="images/comparison4.gif"/></a></p>
		<p>The results here also confirmed those above; when reusing connections the TPS value increases steadily up to about 6 threads
		and then lies still. Also, one can see that the average request time starts increasing steadily first when the TPS has 
		hit its peak, the average then "takes" all the increased load just as when not reusing connections at all.</p>
		</subsection>
		
		<subsection name="Conclusion">
		
		<p>The values obtained with soapUI are almost consistently "higher", if this is <i>better</i> is a matter of discussion. 
		One	clear advantage of soapUI seems to be the possibility to reuse connections, which also makes a big difference when 
		running	many threads (ie simulating many clients).</p>
		<p>Based on the above results my recommendation would therefore be the following: </p>
		<ul>
		<li>For behavioural and functional load testing of Web Services; start with soapUI, move to JMeter if you need its
		"high profile" features.</li>
		<li>For performance load testing of Web Services: use soapUI in conjunction with another tool (for example JMeter) and weigh the results!</li>
		</ul>
		</subsection>
		
		<subsection name="Files">
		<p>If you want to run the tests yourself, the following files are available in <a target="_new" href="files/comparison-files.zip">Load Test Comparison Zip</a>:</p>
		<table><tr><th>File</th><th>Description</th></tr>
		<tr><td>comparison-soapui-project.xml</td>
		    <td>soapUI project file containing all tests run in the comparison</td>
		    </tr>
		<tr><td>soapui-compare.jmx</td>
		    <td>jmeter project file containing all tests run in the comparison</td>
		    </tr>
		    <tr><td>ws4ee-samples-server-ejb.jar</td>
		    <td>precompiled jar file containing tested Web Service, just drop this in the JBoss 4.0.3 deploy folder and
		    the above tests should run as configured (you may need to change the endpoint)</td>
		    </tr>
		 </table>
		 <p>You can download JBoss 4.0.3SP1 from <a target="_new" href="http://www.jboss.com/products/jbossas/downloads">here</a>, but you can also use the 4.0.4RC2
		 release using the new JBossWS stack which gives slightly different results than those shown above (not shown here since this comparison is not
		 meant to compare jboss versions)</p>
		
		</subsection>

		<p><hr size="1"/>Next: <a href="../mock/index.html">Web Service Mocking</a></p>
		</section>
    </body>
</document>
