<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ SoapUI, copyright (C) 2004-2009 eviware.com
  ~
  ~ SoapUI is free software; you can redistribute it and/or modify it under the
  ~ terms of version 2.1 of the GNU Lesser General Public License as published by
  ~ the Free Software Foundation.
  ~
  ~ SoapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  ~ even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Lesser General Public License for more details at gnu.org.
  -->

<document>
    <properties>
        <title>Web Service Functional Testing - Tips and Tricks Login Security</title>
    </properties>
    <body>
    		<section name="Tips and Tricks: 10 Tests of a Web Service Login you should always do">
			<p>
			The most common Web Service Request must be The Login, many of the web services we produce are used by an identified user. 
			This leads to us often having a Login TestStep as the the starting point for  all our Web Service testing a typical TestCase will look Like this: 
			<i>Log In, Get a Session ID and use that ID in all subsequent requests, and finally use that session id to Log out</i>.
			</p>
			<p>
			We have a long tradition of doing security Testing of Login functionality for "Regular" Web Pages as are we very conscious about intrusion mechanisms for web 
			pages when we build them, but still both Security and security testing is quite often left out of Web Service Testing.</p>
			<p>
			In this tip and tricks article we will produce some simple tests you can perform when doing your Web Service Testing and that we feel you should always do. 
			Create the tests in your own project, save them as a template and use them in all your tests all the time.
			</p>
			<p>
			Before we look into the tests, we have to be aware of what we're looking for, so first let's state this; large part of hacking often is not about 
			actually gaining access to a system, but rather exposing system behavior in order to be able to get access to it later. 
			This means large parts of our testing is not about cracking the system, but rather expose behavior in your web service that exposes how it works. 
			Our first Tip is an example of this.
			</p>
			
					 				<table class="relatedInfo" cellspacing="0" cellpadding="0">
	<tr class="a">
    	<td width="75" style="padding-top:5px">
        	<img src="../../images/where_do_i_start.jpg" alt="Start soapUI Testing" longdesc="http://www.soapui.org"></img>
        </td>
        <td>
            <table class="relatedInner">
              <tr>
                <td>
                	<span class="relatedInfoHeader">Get updated!</span>
                </td>
              </tr>
              <tr>
                <td>
                    <div>
						<p>
						This Tips and Tricks article will be updated on a daily basis for 10 days. Follow us on Twitter and we'll let you know when the latest update is out.
						</p>
                    </div>
                </td>
              </tr>
              <tr align="right">
              	<td>
                	<span class="relatedLinks">
                		
                	<a href="http://twitter.com/niclasreimertz" class="externalLink" title="try soapUI Pro" onclick="javascript:urchinTracker:(&apos;/niclastwitterfollow&apos;);">/
                		<img src="images/twitter-button-small.png" title="Twitter button small" alt="Twitter button small" height="70" width="70"/>Follow NiclasReimertz on Twitter
                		</a>
                	</span>
                </td>
              </tr>
            </table>
		</td>
	</tr>
</table>
			
			
			<subsection name="Tip 1) SQL Injection Tests">
				<p>
				<i>Date: July 9, 2009</i> 
				</p>
				<p>
				SQL Injection the art of sending in SQL Statements in forms and data to the target system to be executed by the back end database. 
				The result we're looking for is will either for the system to allow you access or to display information that will move us closer to getting access.
				In the infancy of The Web, this used to be a large problem, but is largely handled today at least on a basic level. Unfortunately with in the realm of 
				SOA development we've taken a step back and the database is exposed surprisingly often. 
				</p>
				<p>
				What we'll be looking at here is using several small steps to see if the base security is fine in regards to Data Injection.
				</p>
				<p>
				<strong>Step 1: Random SQL</strong><br />
				We'll start of with a simple test, we insert a SQL Statement in any field and monitor the return response. 
				<source>
				<![CDATA[
<login>
	<username><User>SELECT * from userstable</username>
	<password>*</password>
</login>
				]]>
				</source>
				</p>
				<p>
				This might seem way to simple, but look at this message:
				<source>
				Microsoft OLE DB Provider for ODBC Drivers error '80040e07' [Microsoft][ODBC SQL Server Driver][SQL Server]Syntax error Invalid string or buffer length.
				</source>
				We have already gained information about what what the database is, we can probably guess what the platform used to create the Web Services are and can 
				use that information in further attacks.
				</p>
				<p>
				<strong>Step 2: Wildcards</strong><br />
				Next we enter a SQL WildCard
				<source>
				<![CDATA[
<login>
	<username>*</username>
	<password>*</password>
</login>
				]]>
				</source> 
				</p>
				<p>
				Both Step 1 and 2 are similar and should really not result in any errors, but although it shouldn't doesn't mean it doesn't and it's wise 
				to try it: you might get an SQL error back.
				Step 3 is more complicated
				</p>
				<p>
				<strong>Step 3: The Classic</strong><br />
				This test is the most common SQl injection test using the following:
				<source>
					<![CDATA[
<login>
	<username> ' or 1=1--</username>
	<password>' or 1=1--</password>
</login>
					]]>
				</source>
		
				"Why?", you might ask. Well, if the SQL used to check the login is:
					<source>
SELECT * FROM users WHERE username = '[username]' AND password ='[password]';
					</source>
					This results in the following if the contents of the elements aren't checked:
					<source>
SELECT * FROM users WHERE username = '' or 1=1 - -' AND password ='[password]';
					</source>
					Which might actually cause the SQL Server to exclude everything after â€œ--" (since it's TransactionSQL) and 
					just return the first user in the database. With some (bad)luck, we might even be able to log in.
					</p>
					<p>
					<strong>Step 4: Empty Strings; The Classic updated</strong><br />
					Step 4 is a variation of step 3:
					<source>
						<![CDATA[
<login>
	<username> ' or ''='</username>
	<password>' or ''='</password>
</login>
						]]>
					</source>
					Which results in the following SQL:
					<source>
SELECT * FROM users WHERE username ='' or ''='' and Password = '' or ''=''
					</source>
Returning all records in the database and possibly logging us in.
					</p>
				
					<p>
					<strong>Step 5: Type Conversions</strong><br />
					We can also try exposing the database by trying sending in type conversions that surely will fail in the database.
					<source>
						<![CDATA[
<login>
	<username>CAST('eviware' AS SIGNED INTEGER)</username>
	<password>yesitdoes!</password>
</login>
						]]>
					</source>
					The goal here is -as with the above- to make the database give us any info by sending an error message that exposes the database. 
					As we said earlier, anything that exposes what the database or the application platform is using is helpful, it can help us look up 
					specific vulnerabilities for that environment.
					</p>
					<p>
					Database hacking is a chapter in itself and you should be learning it from the pro's themselves:
					<a href="http://www.wiley.com/WileyCDA/WileyTitle/productCd-0764578014,descCd-description.html">The Database Hacker's Handbook: Defending Database Servers</a>
					</p>
					<p>
					This tip was quite long, the next will be considerably shorter.
					</p>
			</subsection>
			<subsection name="Tip 2) Log In and Log In again">
				<p>
				<i>Date: July 10, 2009</i> 
				</p>
				<p>
				The fact that this even is a test is of note. <strong><i>Really? Log in and Log in again, why should we test this?</i></strong> <br />
				Well, the premise for this test is kind of similar to Tip 1. Although session security is well handled in most applications on the web, 
				when it comes to Web Services it's not. This test fails surprisingly often and that's why it should be tested.  
				</p>
				<p>See it as kind of making sure your network cable is in your computer when you don't have net access... it feels stupid and degrading to do, 
				but it's a good first step and it does prove to be a problem half the time. That's why this test should be in everybody's toolbox.
				</p>
			
		 	
		 	<strong>1) The base test</strong><br />
		 	<p>
		 	The test itself is is a very simple test.
		 	</p>
			<p>
			Do a standard Login and then do a standard Login again with the same user without doing a log out. Like this:
			<ul>
			<li>login</li> 
			<li>login</li> 
			</ul>
			</p>
			<p>
			If the Login succeeds you are looking at a potential security risk. Also, we might want to look into the response message, is the double login 
			properly handed? Do we get a raw exception that has been thrown propagated up through the system, which exposes the application server? 
			This might be a bit to security conscious, but at least it should be identified and discussed.
			</p>
			
			<strong>2) Deepen the test</strong><br />
		 	<p>
			That was the base test and our starting point, now it's time develop the scenario and deepen the test, try this:
			<ul>
			<li>login</li> 
			<li>logout</li> 
			<li>login</li> 
			<li>logout</li> 
			<li>login</li> 
			<li>login</li> 
			</ul>
			</p>
			<p>
			The result is not likely to change from the base test, but we never know what might turn up, and at least after, we know. The time invested is almost <i>NULL</i> since 
			all we have to do is clone the TestCase and in the new TestCase, clone the TestSteps.</p>
			<p>
			Don't stop there; do tests with long chains of logins and out before testing it. We never know what behavior might show up, and since it's so 
			fast in soapUI to develop new tests, you can almost do it on the fly. Also try interspersing regular requests using correct, expired, and  
			faulty sessionid's.
			</p>
			
			<strong>3) Correct id</strong><br />
			<p>
			This is your base test for further exploration and should succeed. 
			We need this as a control test for the tests that should fail later and well use this as a master for creating the next tests.<br />
		
			<strong>Login</strong><br />
			<source>
						<![CDATA[
<login>
	<username>eviware</username>
	<password> s0ApU1R0ck5</password>
</login>
			]]>
			</source>
			<strong>Response</strong><br />
						<source>
						<![CDATA[
< loginResponse>
	<sessionid>0646305218268376</sessionid>
</ loginResponse>
]]>
</source>
			<strong>New Request</strong><br />
			<source>
									<![CDATA[
			
<getcustomer>
	<sessionid>0646305218268376</sessionid>
	<customerid>vipcustomers_ 23957</ customerid >
</getcustomer>
]]>
</source>
As we said, this a base request and should succeed, but we'll use that to build on.
Of course we don't actually send the session id in the example, we transfer the sessionid from the loginresponse to the getCustomer Request, 
like this is you use PropertyExpansion;
<source>
<![CDATA[
<getcustomer>
	<sessionid>${Test Request: Login#Response#//sam:loginResponse[1]/sessionid[1]}</sessionid>
	<customerid>vipcustomers_ 23957</ customerid >
</getcustomer>
]]>
</source>
</p>
		<strong>4) Request with Expired sessionid</strong><br />
		<p>Now, let's build on it. Let's see what happens if we try to do a getCustomer after logging out.<br />
		<strong>Login</strong><br />
<source>
						<![CDATA[
<login>
	<username>eviware</username>
	<password> s0ApU1R0ck5</password>
</login>
						]]>
					</source>
<strong>Response</strong><br />
<source>
						<![CDATA[
<loginResponse>
	<sessionid>0646305218268376</sessionid>
</ loginResponse>
]]>
					</source>
<strong>Logout</strong><br />
<source>
<![CDATA[
<logout>
	<sessionid>0646305218268376</sessionid>
</logout>
]]>
</source>
</p>
			<strong>Request while logged out</strong><br />
			
			<source>
									<![CDATA[
			
<getcustomer>
	<sessionid>0646305218268376</sessionid>
	<customerid>vipcustomers_ 23957</ customerid >
</getcustomer>
]]>
</source>


<strong>Request with expired id</strong><br />
		<source>
		<![CDATA[
<getcustomer>
<sessionid>0646305218268376</sessionid>
<customerid>vipcustomers_ 23957</ customerid >
</getcustomer>
]]>
</source>
			

<strong>5) Request with Faulty SessionID</strong><br />
<p>
Now for the final test; what happens if we do a GetCustomer with a faulty id straight after logging out.
<strong>Login</strong><br />
<source>
						<![CDATA[
<login>
	<username>eviware</username>
	<password> s0ApU1R0ck5</password>
</login>
						]]>
					</source>
<strong>Response</strong><br />
<source>
						<![CDATA[
< loginResponse>
	<sessionid>0646305218268376</sessionid>
</ loginResponse>
]]>
</source>

<strong>Logout</strong>
<source>
<![CDATA[
<logout>
	<sessionid>0646305218268376</sessionid>
</logout>
]]>
</source>


<strong>Request with non existing id</strong><br />
<source>
						<![CDATA[
<getcustomer>
	<sessionid>456464564654645</sessionid>
<customerid>vipcustomers_ 23957</ customerid >
</getcustomer>
]]>
</source>

This should of course render an error message. 
</p>
		<p>
		Now, build on these tests further. Try different unexpected variations of the tests here, like for example, what happens when two ID's log in simultaneously and sends requests, does the session management work?
		And remember: <strong>Improvise!</strong> You'll never know what you find...
		</p>
		<p>
		</p>
				 
	</subsection>
		<subsection name="Tip 3) Ã€ la recherche du Users perdu">
		<p>
		<i>Date: July 10, 2009</i> 
		</p>
		<p>
		Now, for a simple tip, this is a continuation of the tip above.  It's very simple, and as such it need to be in your bag of tricks. 
		</p>
		<p>
		Let's start by iterating; We're looking for any information that might learn us more about system behavior, set up, or data. 
		Anything that helps us getting closer to getting into the target system is what we want. What we're looking for her is even more 
		common than previous scenarios, and this is worrying, because in this case ther target gives up very useful information.
		</p>
		<p>
		This is what we do, enter what you know is a non-existing user name:
		Say that you have a user name and password combination like this:<br />
		<ul>
			<li><strong>User:</strong> eviware</li>
			<li><strong>Password:</strong> s0ApU1R0ck5</li>
		</ul>
		
		Use a login like this:<br />
<source>
						<![CDATA[
<login>
	<username> emery bear</username>
	<password> s0ApU1R0ck5</password>
</login>
]]>
</source>
And look for a response with the following meaning:<br />
<source>
						<![CDATA[
<loginresponse>
	<error>That user does not exist</error>
</loginresponse>
]]>
</source>
This will allow you to work through a number of user names until find you one that is working.
 		</p>
 		
 		
 				
 		</subsection>
 		
 		<subsection name="Tip 4) Ã€ la recherche du Users perdu. Deux">
 						<p>
				<i>Date: July 14, 2009</i> 
				</p>
<p>
Now let's do it the other way around, what happens if we enter a correct user name and a faulty password?<br />
<source>
						<![CDATA[

<login>
	<username> eviware</username>
	<password>yesitdoes!</password>
</login>
]]>
</source>

If we get a response with the meaning<br />
<source>
						<![CDATA[
<loginresponse>
	<errror>Wrong user name for the password</error>
</loginresponse>
]]>
</source>

We know that the Web Service we're testing will reveal if you enter a valid password, which is a good start for trying to find the correct password.
</p>

<p>
As with previous tips you will be surprise how often this works. You should also try out several combinations and... Improvise! 
</p> 		
		 <p><hr size="1"/></p>
		 	 
		 </subsection>


 		 
		  <subsection name="Tip 5) The Lockout">
		   						<p>
				<i>Date: July 15, 2009</i> 
				</p>
<p>
This security flaw is extra common in Web Services and one that if handled correctly offers very good protection. 
Web Services  aren't as public as web pages and basic security measurements aren't implemented, we probably think that 
â€œWell, the Web Service won't be public so it's a good bet we're  not going to be noticed".
</p>
<p>
 A short unscientific study showed that there are two more reasons why; with web services, we let the prototype go live without actually industrializing 
 it, or the web service is created by rightclicking a method or class in your favorite IDE and chossing "Publish as Web Service".
</p>
<p>
What we do to test it is, basically make an loop with a login request that automatically updates the faulty password. If you haven't been locked 
out after a certain number of tries (how many depends on business requirements, but three should be a good target), you have a potential security risk.<br />
<strong>First Request</strong><br />
<source>
						<![CDATA[
<login>
	<username> eviware</username>
	<password>yesitdoes!1</password>
</login>]]>
</source>
<strong>Second Request</strong><br />
<source>
						<![CDATA[
<login>
	<username> eviware</username>
	<password>yesitdoes!2</password>
</login>]]>
</source>
And so on...
</p>
<p>
So what lockout do we choose? Well the usual is after three failed attempts we get locked out for a certain time, like 6-24 hours. 
One that is very interesting is the Geometrically Increased penalty; for each try you lockout time doubles; the first failed attempt gives you a 1 
second delay, the second, 2, the third 4 and so on. This makes the penalty for an honest mistake very slight, and not very deterring you might think, 
but look at what happens later; after 25 failed attempts the lock out time is 2<sup>25</sup> seconds or as it is more commonly know; <i> more than a year!</i>. 
This makes robots or scripts unusable!

</p>
</subsection>

		  <subsection name="Tip 6) Element Duplication">
		   						<p>
				<i>Date: July 16, 2009</i> 
				</p>
<p>
Sometimes we might not be able to hack a Web Service directly, but we <strong>can</strong> deduce how the Web Service behaves by sending it unexpected XML. 
One way is sending double elements, like this:<br />

<source>
						<![CDATA[
<login>
	<username> eviware</username>
	<password> s0ApU1R0ck5</password>
	<password> s0ApU1R0ck5</password>
</login>
]]>
</source>
You might get a response like this<br />

<source>
						<![CDATA[
<loginresponse>
<error>password is allowed only once and must be at least 6 characters and at most 20 characters.</error>
</loginresponse>
]]>
</source>
Also try that in several permutations:<br />

<source>
						<![CDATA[
<login>
	<username> eviware</username>
	<username> eviware</username>
	<password> s0ApU1R0ck5</password>
	<password> s0ApU1R0ck5</password>
</login>
]]>
</source>
Or:<br />
<source>
						<![CDATA[
<login>
	<username> eviware</username>
	<username> eviware</username>
	<username> eviware</username>
	<password> s0ApU1R0ck5</password>
</login>
]]>
</source>
</p>
<p>
Don't stop there! It is just a matter of cloning a TestStep and then changing it to be a new test. Try the unexpected. And Improvise!
</p>
<p>
Next step is flipping this test...
</p>

</subsection>		

		  <subsection name="Tip 7) Element Omission">
		   						<p>
				<i>Date: July 17, 2009</i> 
				</p>
<p>
lement Omission is quite similar to Element Duplication, but the opposite. Instead of having extra elements, we enter less elements in the request:<br />

<source>
						<![CDATA[
<login>
	<username> eviware</username>
</login>
]]>
</source>
</p>
<p>
To your surprise, you might be getting:
<source>
						<![CDATA[
<loginresponse>
	<errror>element password is expected.</error>
</loginresponse>
]]>
</source>
</p>
<p>
You should do clone and change here as well, we'll try the orther way around:<br />
<source>
<![CDATA[
<login>
	<password>s0ApU1R0ck5</password>
</login>
]]>
</source>
and without any elements at all:<br />
<source>
<![CDATA[
<login>
</login>
]]>
</source>
</p>
</subsection>

		  <subsection name="Tip 8) Malformed XML">
		   						<p>
				<i>Date: July 20, 2009</i> 
				</p>

<p>
This one is fun; try different variations of the elements in the request:<br />
<source>
<![CDATA[
<login>
	<user_name> eviware</username>
	<pass_word> s0ApU1R0ck5</password>
</login>
]]>
</source>
or like this:<br />
<source>
<![CDATA[
<login>
	<user> eviware</username>
	<pass> s0ApU1R0ck5</password>
</login>
]]>
</source>
You might be surprised by the answer:<br />

<source>
<![CDATA[
<loginresponse>
	<errror>element username is expected.</error>
</loginresponse>
]]>
</source>
also, send requests where the end elements afre missing <br />
<source>
<![CDATA[
<login>
	<username>eviware<username>
	<pass> s0ApU1R0ck5</password>
</login>
]]>
</source>
and the opposite; requests with missing start elements: <br />
<source>
<![CDATA[
<login>
<user> eviware</username>
	s0ApU1R0ck5</password>
</login>
]]>
</source>
</p>
<p>
Something to also malform is the namespaces. Let's look at how the pseudo code we've been using earlier actually would look: <br />
<source>
<![CDATA[
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:demo="http://demo.eviware.com">
  <soapenv:Header/>
  	<soapenv:Body>
		<demo :login>
			<demo:username> eviware</demo:username>
			<demo:password> s0ApU1R0ck5</demo:password>
		<demo :/login>  
	</soapenv:Body>
</soapenv:Envelope>
]]>
</source>
Now, let's change omit one of the name spaces: <br />
<source>
<![CDATA[
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:demo="http://demo.eviware.com">
  <soapenv:Header/>
  	<soapenv:Body>
		<demo :login>
			<username> eviware</demo:username>
			<demo:password> s0ApU1R0ck5</demo:password>
		<demo :/login>  
	</soapenv:Body>
</soapenv:Envelope>
]]>
</source>
as well as the reference to the namespace and have one quote to many<br />
<source>
<![CDATA[
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"">
  <soapenv:Header/>
  	<soapenv:Body>
		<demo :login>
			<username> eviware</demo:username>
			<demo:password> s0ApU1R0ck5</demo:password>
		<demo :/login>  
	</soapenv:Body>
</soapenv:Envelope>
]]>
</source>
</p>
</subsection>

<subsection name="Tip 9) Boom goes the Payload!">
		   						<p>
				<i>Date: July 21, 2009</i> 
				</p>
				<p>
Let's start with a quote from Steve Jobs: <strong>"Boom!"</strong>.<br />
The basis for this test is simple; "The weirdest things happens with the weirdest content". Basically, what we'll do is simple, we'll fill up the contents of an element with a huge payload.
But first do this slightly, let's assume you know that the user name is allowed to be 25 characters. try what happens with 26; <br />
<source>
<![CDATA[
<login>
	<username>eviware eviware eviware e</username>
	<password>s0ApU1R0ck5</password>
</login>
]]>
</source>
</p>

<p>
We should also try 24 and 25 just for interest sake, we'll do the usual, clone a test and then change the message.
</p>

<p>
That really should be handled correctly, but what happens when we enter a huge number of characters, a payload overload?<br />
<source>
<![CDATA[
<login>
	<username>
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware 
	eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware eviware
	</username>
	<password> s0ApU1R0ck5</password>
</login>
]]>
</source>
For demonstration purposes I kept the payload small, make the content of username <strong>HUGE</strong> and see what happens:
<source>
<![CDATA[
2007-12-03 13:54:21,706 [Servlet.Engine.Transports : 0] FATAL WebService.CustomerService. 
Login  - Description: java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: 
java.rmi.RemoteException: Error; nested exception is: 
java.rmi.RemoteException: Problem with Query; nested exception is: 
java.sql.SQLException: Could not insert new row into the table. Context: 
DataBaseRemote.getCusstomerData, customer=456789 Identity: eviware 
Details: java.rmi.ServerException: RemoteException occurred in server thread; nested exception is: To Long UserName, must be Maximum 24 Bytes
]]>
</source>				
				</p>
<p>
The above is a slightly modified response in tests from a user in the community (with their permission of course). The actual response contained information about both the 
database and the application server as well as information about the ERP system built on top of it and the name of the Stored Procedure used. The test also had the nice 
effect that it ground the application server to a halt, making it vulnerable for attacks.
</p>
</subsection>


<subsection name="Tip 10) XPath injection">
<p>
Now for the final tip, we're we'll end up where we started; XPath Injection. soapUI users probably knows about XPath since this is what we use for XPath assertions, when we transfer content and more. 
The reason why we use Xpath is because this the standard (and a very powerful) way to access and and query XML documents, "SQL for XML".
</p>
<p>
XPath injection then basically is like SQL injection in XML documents. Now, user data, for example, is seldom stored in XML Documents, so you might believe you are safe, 
but often the system you're testing is communicating with another system over Web Services. And what do we use to communicate, what do we send back and forth? 
XML documents...
</p>
<p>
Now, when we know <i>why</i>, let's look at <i>how</i>.<br />
<source>
<![CDATA[
<login>
	string(//user[username/text()='' or '1' = '1' and password/text()='' or '1' = '1'])
</login>
]]>
</source>
We know that from the SQL Injection example, we're trying to let the system log us in. It might not work, but it 
is very interesting to see how the error has been handled.
</p>

<p>
We can also try to tease the XPath processor in the target system;
<source>
<![CDATA[
<login>
	string(//user[user_name/text()='' or '1' = '1' and password/text()='' or '1' = '1'])
</login>
]]>
</source>
What happens when the XPath processor gets a faulty node? Will we get an error message directly from Xalan, Saxon, Microsoft's XPathNavigator?
</p>
<p>
You should of course play around with the XPath expressions some more and try to coax out as much information as possible about the target system.
</p>

</subsection>

<subsection name="Conclusion">
This was 10 tips on how to hack a log in service. We have just scratched the surface, as there are many more, but all 10 are sanity checks that are a 
must when testing Web Service. All 10 can created easily in soapUI which is a great tool for security testing Web Services, but remember this:<br />
The best tool for testing Web Services is <strong>you</strong>, use your imagination and instincts and don't be afraid of improvising new tests.
</subsection>	 
		 
		</section>
    
    </body>
</document>
