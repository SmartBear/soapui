<?xml version="1.0"?>
<document>
    <properties>
        <title>Data Driven Testing - soapUI Pro Data Source Step </title>
    </properties>
    <body>
		<section name="SoapUI Pro DataSource Steps">
		<p>
		Data Driven Web Service Testing is one on soapUIs' strengths. In soapUI this can be done by Groovy scripting, but in soapUI
		Pro this is simplified. The basis for this is the DataSource Step. 
		</p>
		
			 <table class="relatedInfo" cellspacing="0" cellpadding="0">
                <tr class="a">
                    <td width="75" style="padding-top:5px">
                        <img src="../../images/where_do_i_start.jpg" alt="Start soapUI Testing"
                             longdesc="http://www.soapui.org"></img>
                    </td>
                    <td>
                        <table class="relatedInner">
                            <tr>
                                <td>
                                    <span class="relatedInfoHeader">Did you know?</span>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <div>
                                        <p>soapUI Pro has functionality for creating data driven tests -for example from data bases or Excel- easily.</p>
                                        <p>The Data Source Steps soapUI pro will improve your productivity and make Web Service Testing fun.</p>
                                    </div>
                                </td>
                            </tr>
                            <tr align="right">
                                <td>
                                    <span class="relatedLinks">
                                        <a href="http://www.eviware.com/component/option,com_wrapper/Itemid,41/"
                                           title="try soapUI Pro"
                                           onclick="javascript:urchinTracker:('/downloadPro');">
                                            <img src="images/try_pro_100.png" alt="Try soapUI pro to soap test"
                                                 width="101" height="20" longdesc="http://www.eviware.com"/>
                                        </a>
                                    </span>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
		
		<p>soapUI Pro includes a specialized DataSource TestStep that greatly eases the task of creating data driven tests. 
		DataSource steps can further be nested in a TestCase allowing one DataSource to be input to another, for example if directly 
		contains a number of XML data files, the Directory DataSource could be used to iterate the files, and an XML DataSource 
		could be used to extract data from the files.</p>
		<p>The following DataSources are currently supported:</p>
		<ul>
		<li><a href="#JDBC_DataSource">JDBC DataSource</a> - reads data from a JDBC data source</li>
		<li><a href="#JDBC_Connection_DataSource">JDBC Connection DataSource</a> - reads data through a JDBCConnection configured on a project level</li>
		<li><a href="#Excel_DataSource">Excel DataSource</a> - extracts data from an Excel (xls) file</li>
		<li><a href="#Grid_DataSource">Grid DataSource</a> - allows entries or management of data from within the editor</li>
		<li><a href="#XML_DataSource">XML DataSource</a> - extracts data from an XML property</li>
		<li><a href="#File_DataSource">File DataSource</a> - extracts data from a columnar data file</li>
		<li><a href="#Directory_DataSource">Directory DataSource</a> - reads files into properties</li>
		<li><a href="#Groovy_DataSource">Groovy DataSource</a> - opens for any kind of DataSource</li>
		</ul>
		
		<p>A complementary DataSourceLoop step is required and thus available for specifying when and where 
		to loop for each row of data available from the DataSource.</p>
		
		<subsection name="The DataSource Editor">
		<p>The DataSource editor is divided into 4 parts;</p>
		<ul>
		<li>A list of properties to the left for specifying which properties the DataSource reads and exposes</li>
		<li>A toolbar to the top right for selecting a DataSource and setting properties and options</li>
		<li>A DataSource specific-configuration panel to the right</li>
		<li>A Test Log inspector at the bottom for displaying rows returned when either testing the datasource 
		or when running its containing TestCase</li>
		</ul>
		<p align="center"><img src="images/datasource_editor.gif" alt="SoapUI Pro DataSource Editor for data driven soap testing"/></p>
		<p>The list of Properties must contain the properties that will be "exposed" by the DataSource step, they 
		are added or removed using the Add/Remove toolbar buttons. Each DataSource then has its own way of reading data into
		the properties, as described below.</p>
		<p>The DataSource drop down select with DataSource to use, and the "Test" button will prompt to select a configurable
		number of rows from the currently selected and configured DataSource. Returned rows will be displayed in the Test Log
		at the bottom. The "Preload" and "Share" options are described in the "DataSource Execution" section below. </p>
		</subsection>
		
		<subsection name="DataSource Options">
		<p>The DataSource Options dialog is as follows:</p>
		<p align="center"><img src="images/datasource_options.gif" alt="SoapUI Pro DataSource Options"/></p>
		<p>The following settings are available:</p>
		<ul>
		<li><b>Shared</b> - controls whether this DataSource should be shared between threads in a LoadTest (see below)</li>
        <li><b>Restart Shared</b> - controls if a shared DataSource can be restarted during a LoadTest</li>
        <li><b>Restart On Run</b> - controls if the DataSource should be restarted every time the TestStep is executed</li>
		<li><b>Preload</b> - preloads the data before running the TestCase</li>
		<li><b>Fail on Empty</b> - fails the DataSource step if no data is available. This option can be used
		to do data-driven assertions, if for example the SQL query of a JDBC datasource contains a WHERE clause that
		uses property expansion to select data corresponding a previously returned response</li>
        <li><b>Goto Loop on Empty</b> - if the DataSource is empty on initial execution, this option will
        transfer TestCase execution to the first matching DataSourceLoop step after the DataSource in the TestCase</li>
		<li><b>Start Row</b> - the first row in the configured DataSource to use (first row = 0)</li>
		<li><b>Last Row</b> - the last row in the configured DataSource to use</li>
        <li><b>Trim</b> - trims values retreived from the DataSource</li>
        <li><b>Entitize</b> - entitize values retreived from the DataSource</li>
        <li><b>Expand</b> - expand property-expansions in DataSource values</li>
		</ul>
		
		</subsection>
		
		<subsection name="DataSource Execution">
		<p>Depending on the value of the "Preload" option in the toolbar, the DataSource will initialize its external data
		either before running the TestCase (preload = true) or when first running the DataSource (preload = false). Depending
		on which kind of DataSource that has been selected and configured, it may not make much sense to set preload to true, 
		for example when using the XML DataSource together with the response property of a request, setting preload to true will
		fail since the data is first available when the request has been executed.</p>
		<p>Consecutive rows are retrieved and read into the exposed properties either when TestCase execution passes the 
		DataSource step or when a DataSourceLoop Step checks for the next available row.</p>
		<p>The "Shared" option in the toolbar control if the DataSource should be shared between threads during a LoadTest, meaning
		that all running threads will read from the same source of data instead of each creating their own.</p>
        <p>Read More in our blog about <a href="http://www.eviware.com/blogs/oleblog/?p=194" target="_new">DataDriven Load Testing</a>.</p>    
		</subsection>

		<subsection name="JDBC DataSource">
		<p>The JDBC DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/jdbc_datasource_config_panel.gif" alt="SoapUI Pro JDBC DataSource Options"/></p>
		<p>There are 5 available options pretty straight-forward, with buttons for using wizard for configuring them, and for testing if
		properly configured:</p>
		<ul>
		<li><b>Driver</b> - the JDBC Driver to load and use for this DataSource. Must be available in the soapUI classpath 
		either by placing it in a soapui/bin/ext directory, the jre/lib/ext directory or by directly modifying the 
		soapui.bat/.sh files to include the required jar files</li>
		<li><b>Connection String</b> - the connection string to use, pass_value will be replaced with real password value at the time of connecting</li>
		<li><b>Password</b> - the masked password value</li>
		<li><b>SQL Query</b> - the query to issue for the created connection. It must return at least the same number of rows as specified
		in the Properties List where there must be a column with the same name as its corresponding property.</li> 
		<li><b>Stored Procedure</b> - select if the SQL statement calls a stored procedure</li>
		</ul>
		<subsection name="JDBC DataSource PreparedProperties">
		<p>Starting with SoapUI 3.5 there is a new option of adding properties whose values will be replaced in the query through PreparedStatement. 
		Properties need to be specified in the query as ":propertyName" and will by replaced by exact names.</p>
		</subsection>
		</subsection>
		
		<subsection name="JDBC DataSource Configuration wizard">
		<ul>
		Configuration wizard has several steps for setting driver/connection string, checking if stored procedure and creating query 
		<p align="center"><img src="images/jdbc_connection_config_wizard.gif" alt="JDBC Connection configuration wizard"/></p>
		<p align="center"><img src="images/jdbc_connection_storedproc_wizard.gif" alt="DB Connection stored procedure check"/></p>
		<p>In case of stored procedures simple creating query is used. Columns listed are output columns from the stored procedure 
		and those that should appear in data source as properties should be checked. 
		Starting from version 3.5 there is an option of specifying input parameters, so stored procedures with input parameters are also included in wizards.
		Input parameters won't be listed in the wizard  but will be added in PreparedProperties table
		with an option of setting their values.</p>
		<p align="center"><img src="images/jdbc_connection_query_wizard.gif" alt="JDBC Connection query wizard"/></p>
		<p>Otherwise more complex query can be built:</p>
		<p align="center"><img src="images/jdbc_build_query_wizard.gif" alt="JDBC Connection query wizard"/></p>
		<p>On more detailed explanation of building query please check <a href="../../tutorials/jdbc/jdbc-tutorial.html#Configuring_the_SQL_Query">Configuring SQL Query</a> </p>
		</ul>
		</subsection>
		
		<subsection name="JDBC Connection DataSource">
		<p>The JDBC Connection DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/jdbcconnection_datasource_config_panel.gif" alt="SoapUI Pro JDBC Connection DataSource Options"/></p>
		<p>Configuration options are pretty much the same as for JDBC DataSource except that here JDBC Connection set on project level
		is selected instead of configuring driver/connection string for this particular data source. Here is also possible creating a new JDBC connection
		for specified project which will be added to the project list.</p>
		</subsection>
		
		<subsection name="Excel DataSource">
		<p>The Excel DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/excel_datasource.gif"  alt="SoapUI Pro Excel DataSource Options"/></p>
		<p>The 3 available options are pretty straight forward:</p>
		<ul>
		<li><b>File</b> - the excel file containing the data to use</li>
		<li><b>WorkSheet</b> the worksheet in the file containing the data to use</li>
		<li><b>Start at Cell</b> - the top left cell to start at when extracting data.</li> 
		</ul>
		</subsection>
		
		<subsection name="Grid DataSource">
		<p>The Grid DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/grid_datasource.gif" alt="SoapUI Pro Grid DataSource Options"/></p>
		<p>
		Grid DataSources are the easiest way of creating a DataSource allowing very rapid data driven testing. 
		While it is not meant to scale to massive amounts of data, it is very useful for early iterations in Agile Web Service Testing and can
		be replaced for more the more scalable DataSources later.
		</p>
		<p>The grid displays one column for each defined property, columns are added/removed when properties
		are added removed. Enter data by either typing into the grid or copy/pasting from for example Excel.
		The last row in the grid is not part of the data but there for adding new rows. The following actions 
		are available from the toolbar under the grid:</p>
		<ul>
		<li><b>Delete Rows</b> - prompts to delete the selected rows</li>
		<li><b>Insert Rows</b> - prompts to insert a number of rows at the current row</li>
		<li><b>Clear Cells</b> - prompts to clear the selected cells</li>
		</ul>
		</subsection>

		<subsection name="XML DataSource">
		<p>The XML DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/xml_datasource_config_panel.gif" alt="SoapUI Pro XML DataSource Options"/></p>
		<p>XML DataSources are very usable since this means you can use a previous response as a DataSource</p>
		<p>The available options are:</p>
		<ul>
		<li>Source Step - the TestStep containing the XML property to read from (could be another DataSource)</li>
		<li>Source Property - the Property containing the XML to use</li>
		<li>Row XPath - the XPath expression to use for selecting the "Rows" for the data</li>
		<li>Column XPaths - one XPath expression for each DataSource property relative to the Row XPath</li>
		</ul>
		<p>During execution, the Row XPath will be selected during startup and each rows property values will be 
		selected relative to the current row node (as shown in the above screenshot)</p>
		</subsection>

		<subsection name="File DataSource">
		<p>The File DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/file_datasource_config_panel.gif"  alt="SoapUI Pro File DataSource Options"/></p>
		<p>Files are expected to be in a simple row format (for example comma-separated), where each row contains 
		the supplied data values separated by a configurable separator. The available options are:</p>
		<ul>
		<li>File - the file to read</li>
		<li>Separator - the separator for the columns in each row</li>
		<li>Trim Values - values will be trimmed after reading</li>
		</ul>
		</subsection>

		<subsection name="Directory DataSource">
		<p>The Directory DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/directory_datasource_config_panel.gif" alt="SoapUI Pro Directory DataSource Options"/></p>
		<p>The directory DataSource has 2 options:</p>
		<ul>
		<li>Directory : the Directory to scan for files</li>
		<li>Filename Filter : a standard FileName filter used to narrow down which files to read</li>
		</ul>
		<p>A DataSource Step with a Directory DataSource need only to define one property which will contain the 
		entire file as read from disk. This could then be input to a request body or a nested DataSourceStep that uses
		the XML DataSource to extract data from the read file.</p>
		</subsection>

		<subsection name="Groovy DataSource">
		<p>The Groovy DataSource has the following configuration panel:</p>
		<p align="center"><img src="images/groovy_datasource_config_panel.gif"  alt="SoapUI Pro Groovy DataSource Options"/></p>
		<p>This step allows any kind of DataSource to be created for a DataSource Step. The Groovy script must set 
		desired properties in the available "result" object	(a StringToStringMap), available context variables are:</p>
		<ul>
		<li>"result" - for specifying result values</li>
		<li>"context" - the current TestRunContext for storing context-specific values</li>
		<li>"testRunner" - the current TestRunner object</li>
		</ul> 
		</subsection>

		 <p><hr size="1"/>Next: <a href="datasourceloopstep.html">soapUI Pro DataSourceLoop Step for data driven testing</a></p>
		</section>
    </body>
</document>

