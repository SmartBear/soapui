<?xml version="1.0"?>
<document>
    <properties>
        <title>SOAP Testing Tool soapUI - Groovy scripting</title>
    </properties>
    <body>
		<section name="Scripting your test with Groovy">
		<p>The Groovy Script step allows you to specify an arbitrary 
		<a target="_new" href="http://groovy.codehaus.org">Groovy</a> script during the execution of a TestCase. The 
		script has full access to the soapUI object model and can thus perform a variety of tasks, for example:</p>
		<ul>
		<li>Read data from an external data source and write it to another steps properties</li>
		<li>Control TestCase flow based on outcome of some previous step or external invocation</li>
		<li>Trigger the execution of other TestSteps and/or TestCases</li>
		<li>Perform advanced response validations not possible with existing assertions</li>
		<li>Write the results of some previous TestStep to an external source (reporting, etc...)</li>
		<li>etc... </li>
		</ul>
		<p>If you need to add external libraries to the soapUI classpath for your Groovy scripts (for example 
		jdbc drivers), put these in the bin\ext folder under the soapUI installation, these will be read upon 
		started and added to the soapUI classloader. (not currently possible in the Java WebStart version of soapUI).</p>
		
		
						
				<table class="relatedInfo" cellspacing="0" cellpadding="0">
	<tr class="a">
    	<td width="75" style="padding-top:5px">
        	<img src="../../images/where_do_i_start.jpg" alt="Start soapUI Testing" longdesc="http://www.soapui.org"></img>
        </td>
        <td>
            <table class="relatedInner">
              <tr>
                <td>
                	<span class="relatedInfoHeader">Did you know?</span>
                </td>
              </tr>
              <tr>
                <td>
                    <div>
						<p>
						In <b><i>soapUI Pro</i></b> the Groovy support is extended. You can create your own script libraries for common functionality which can be used shared by the Testing team.
						</p>
						<p>
						<b><i>soapUI Pro</i></b> contains productivity enhancements as well as offers Professional World Class support.
						</p>
                    </div>
                </td>
              </tr>
              <tr align="right">
              	<td>
                	<span class="relatedLinks"><a href="http://www.eviware.com/component/option,com_wrapper/Itemid,41/" title="try soapUI Pro" onclick="javascript:urchinTracker:('/downloadTrial');">
                                               <img src="../../images/try_pro_100.png" alt="Try soapUI pro to soap test" width="101" height="20" longdesc="http://www.eviware.com"/></a></span>
                </td>
              </tr>
            </table>
		</td>
	</tr>
</table>
		
			
		<subsection name="The Groovy Script Editor">
		<p>The Groovy Script editor is a straight forward text-editor without not to many bells-and-whistles except undo/redo
		functionality;</p>
		<p align="center"><img src="images/script_editor.gif" alt="SoapUI Groovy Script editor"></img></p>
		<p>The editor has three components (from top to bottom):</p>
		<ul>
		<li><b>A toolbar</b> : currently only containing a "Run" button</li>
		<li><b>A script editor</b> : standard text-editor</li>
		<li><b>A log inspector</b> : can be written to using the script contexts <code>log</code> object</li>
		<li><b>A status bar</b> : displays caret position and a progress bar during script execution</li>
		</ul>
		<p>The editor popup shown in the screenshot above has standard editing/navigation actions</p>
		</subsection>
		
		<subsection name="Script Execution">
		<p>When a Groovy script is executed, the following context variables are set for the script to use:</p>
		<ul>
		<li><code>testRunner</code> : the <a target="_new" href="http://www.soapui.org/apidocs/com/eviware/soapui/model/testsuite/TestRunner.html">soapUI TestRunner</a>
		running the current TestCase, this will for now always be an instance of
		<a target="_new" href="http://www.soapui.org/apidocs/com/eviware/soapui/impl/wsdl/testcase/WsdlTestCaseRunner.html">soapUI WsdlTestCaseRunner</a></li>
		<li><code>context</code> : the <a target="_new" href="http://soatoolbox.com/apidocs/com/eviware/soapui/model/testsuite/TestRunContext.html">soapUI TestRunContext</a>
		running the current TestCase, this will for now always be an instance of
		<a target="_new" href="http://www.soapui.org/apidocs/com/eviware/soapui/impl/wsdl/testcase/WsdlTestRunContext.html">soapUI WsdlTestRunContext</a></li>
		<li><code>log</code> : a standard log4j <code>Logger</code> object available for logging arbitrary information</li>
		</ul>
		<p>When the script is run from inside the editor using the toolbars "Run" button, the first 2 objects will be set to
		mock implementations allowing limited access to their actual functionality. The <code>log</code> object will in 
		this case write to the log window in the editor, when running from inside a TestCase the log will write to a 
		"Groovy log" tab in the main soapUI log.</p>
		<p>If you want to fail the script due to some internal error throw an Exception from the script containing the
		error message (see example below)</p>
		
		</subsection>
		
		<subsection name="Context Properties">
		<p>The following properties are available from within a groovy script:</p>
		<ul>
		<li><b>ThreadIndex</b> - the index of the created thread when running under a LoadTest. This value will never change for a given 
		TestCase during its run time. New threads will simply get an incremented index, the mod of this value could for example be used 
		as an index into a data file (to handle changes in number of threads). When not running under a LoadTest the value of this
		property will be "0".</li>
		<li><b>RunCount</b> - tells how many times the TestCase has been run by its thread (not in total) when running under a LoadTest.
		When not running under a LoadTest the value of this	property will be "0".</li>
		<li><b>LoadTestRunner</b> - the current 
		<a target="_new" href="http://www.soapui.org/apidocs/com/eviware/soapui/model/testsuite/LoadTestRunner.html">soapUI LoadTestRunner</a> 
		when running under a LoadTest, null otherwise.</li>
		<li><b>#HTTP_STATE</b> - the <a target="_new" href="http://jakarta.apache.org/commons/httpclient/apidocs/org/apache/commons/httpclient/HttpState.html">HttpState</a> maintained by the TestCase if it has been set to do so in the TestCase Options
		dialog.</li>
		</ul>
		
		</subsection>
		
		<subsection name="Groovy Script Examples">
		<p>Getting started with Groovy is not as easy as it may seem... here are some examples to get you started:</p>
		<h4>Modification of a Request xml:</h4>

		<source><![CDATA[// get request property
def request = testRunner.testCase.getTestStepByName( "Request 1" );
def property = request.getProperty( "request" );

// parse out textnodes to modify
def node = new groovy.util.XmlParser(false,false).parseText(property.value);
def textNodes = node["soapenv:Body"]["sam:getContactInfo"]["String_1"][0].children()

// modify
textNodes.clear();
textNodes.add( "test" + System.currentTimeMillis() );

// write back to string
def writer = new java.io.StringWriter();
def printer = new groovy.util.XmlNodePrinter( new PrintWriter( writer ));
printer.print( node );

// set property
property.setValue( writer.toString() )]]></source>

<h4>Restarting a test after a certain time</h4>

<source><![CDATA[// check if time is set
startTime = context.getProperty( "startTime" )
if( startTime == null )
{ 
   startTime = System.currentTimeMillis()
   context.setProperty( "startTime", startTime )
}
timePassed = System.currentTimeMillis() - startTime
if( timePassed < 60000 )
{
   // countdown and set name
   context.currentStep.name = "Groovy Step - " + (60000-timePassed) + "ms left"
   log.info "timePassed = " + timePassed
   Thread.sleep( 1000 )
   testRunner.gotoStep( 0 )
}
else
{
   // reset name and pass on
   context.currentStep.name = "Groovy Step"
   log.info "timePassed = " + timePassed + ", exiting.."
}]]></source>

<h4>Reading properties from a file and assigning them to a Properties Step</h4>

<source>// read the file
def properties = new java.util.Properties();
properties.load( new java.io.FileInputStream( "testprops.txt" ));

def targetStep = testRunner.testCase.getTestStepByName( "Properties" );

// assign single property
targetStep.setPropertyValue( "myproperty", properties.getProperty( "myproperty" ));

// assign all properties
def names = properties.propertyNames();
while( names.hasMoreElements() )
{
   def name = names.nextElement();
   targetStep.setPropertyValue( name, properties.getProperty( name ));
}</source>

<h4>Add a TestStep dynamically</h4>

<source>// add a properties step
testRunner.testCase.addTestStep( "properties", "another step" );</source>


<h4>Fail the script step</h4>

<source>// fail randomly
if( Math.random() > 0.5 )
   throw new Exception( "A random error has occurred!" );</source>

<h4>Read/set cookies</h4>
<p>If you select the "Maintain HTTP Session" option in the TestCase Options Dialog, an internal <code>HttpState</code> object
will be maintained for the entire TestCase, which includes any cookies set by the target server. The following script reads all
cookies currently set in the HttpState and writes them to the Groovy log:</p>

<source>def state = context.getProperty( com.eviware.soapui.model.testsuite.TestRunContext.HTTP_STATE_PROPERTY )
assert state != null : "Missing HttpState.."

def cookies = state.cookies
assert cookies.length > 0 : "Missing cookies.."

for( c in 0..cookies.length-1 )
 log.info cookies[c].name + " = " + cookies[c].value </source>
 
<p>If you on the other hand want to set some cookie before making a request, do as follows:</p>
 
<source>def state = context.getProperty( com.eviware.soapui.model.testsuite.TestRunContext.HTTP_STATE_PROPERTY )
assert state != null : "Missing HttpState.."

state.addCookie( new org.apache.commons.httpclient.Cookie( "127.0.0.1", "SessionID", "1234", "/", null, false ) )</source>

<p>(remember to set the domain and path correctly)</p>
		</subsection>
		
		
		<subsection name="SoapUI GroovyUtils">
		<p>The GroovyUtils class simplifies several common scripting tasks. Instantiate 
		GroovyUtils from within any Groovy Script in soapUI (MockResponse, Script Assertion, etc) using:</p>
		<source>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )</source>
		<p>GroovyUtils currently includes the following (few) methods:</p>
		<ul>
		<li><code>projectPath</code> : a property holding the path to the containing project, useful for accessing
		data files in same folder</li>
		<li><code>setPropertyValue( String testStepName, String propertyName, String value )</code> : sets the specified
		property value</li>
		<li><code>expand( string )</code> - expands the specified <a href="../properties.html#Property_Expansion_in_soapUI">Property Expansion</a> string</li>
		<li><code>getXmlHolder( String xmlPropertyOrString )</code> : Creates an <code>XmlHolder</code> object (see below) for 
		easily accessing/modifying contents of an XML document using XPath expressions. The argument must either be
		a TestStep property in the <code>TestStepName#PropertyName</code> format or a valid XML string</li>
		</ul>
		<p>The above mentioned XmlHolder object has the following methods:</p>
		<ul>
		<li><code>getNodeValue( String xpath )</code> : returns the value of the first node pointed to by the specified
		XPath expression (can be replaced by holder[xpath] expression, see below )</li>
		<li><code>getNodeValues( String xpath )</code> : returns a String array containing the values of all nodes 
		pointed to by the specified XPath expression.</li>
		<li><code>getDomNode( String xpath )</code> : returns the DOM Node of the first node pointed to by the specified
		XPath expression.</li>
		<li><code>getDomNodes( String xpath )</code> : returns a DOM Node array containing all nodes 
		pointed to by the specified XPath expression.</li>
		<li><code>setNodeValue( String xpath, String value )</code> : sets the content of the first node pointed to by 
		the specified XPath expression to the specified value (can be replaced by holder[xpath] = value expression, see below )</li>
		<li><code>declareNamespace( String prefix, String namespaceURI )</code> : declares a namespace that will be used in 
		a following get/set operation, can also be set with holder.namespaces[prefix] = namespaceUri (see example below)</li>
		<li><code>getNamespaces()</code> - returns a Map of prefixes to namespace URI:s that will 
		be used in XPath expressions</li>
		<li><code>removeDomNodes( xpath )</code> - removes all DOM nodes matching the specified
		XPath expression</li>
		<li><code>xml</code> : property containing the updated xml string</li>
		<li><code>xmlObject</code> : property containing the parsed XMLBeans XmlObject for the xml string</li>
		<li><code>prettyXml</code> : property containing the pretty-printed updated xml string</li>
		<li><code>updateProperty()</code> : if the XmlHolder was created from a TestStep property, that property will be updated
		with the currently held xml (see example below)</li>
		<li><code>updateProperty( boolean prettyPrint )</code> : same as previous, with option to pretty print the updated xml. 
		Defaults to false when not specified.</li>
		</ul>
		<p>If any of the specified XPath expressions contains no namespace declarations or none have been declared
		using the <code>declareNamespace</code> method, those present in the XML Message 
		will be used in the same way as in <a href="../properties.html#Property_Expansion_in_soapUI">Property Expansion</a>.</p>
		<p>Some examples of both the GroovyUtils and XmlHolder:</p>
		<source>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
log.info( groovyUtils.projectPath )

// create holder for last response and log requestId
def holder = groovyUtils.getXmlHolder( "Book Author Search#Response" )
log.info( holder.getNodeValue( "//ns1:RequestId" ))

// create holder for request and set id
holder = groovyUtils.getXmlHolder( "Book Author Search#Request" )
holder.setNodeValue( "//ns:SubscriptionId", ""+Math.random() )

// update request with updated xml
holder.updateProperty()</source>

		<p>Also, XmlHolder implements the Map interface for shorter syntax when setting and getting node values,
		the corresponding above calls can be replaced by:</p>
		<source>...
log.info( holder["//ns1:RequestId"] )

...
holder["//ns:SubscriptionId"] = ""+Math.random()

...</source>
        <p>If the specified XPath expression returns multiple values when getting a value, a String array is returned instead:</p>
        <source>for( author in holder["//ns1:Author"] )
   log.info( author )</source>

      	<p>If you are not sure of the namespace-prefix to use, you can declare it yourself:</p>
      	<source>def holder = groovyUtils.getXmlHolder( "Book Author Search#Response" )
holder.namespaces["abc"] = "http://webservices.amazon.com/AWSECommerceService/2006-11-14"
log.info( holder["//abc:RequestId"] )</source>
		
		</subsection>

		<subsection name="SoapUI Pro GroovyUtilsPro">
		<p>The GroovyUtilsPro class has additional options for working with 
		<a href="../projects/jdbcConnections.html">JDBC connections defined at the Project level</a>.
		Instantiate	GroovyUtilsPro using:</p>
		<source>def groovyUtils = new com.eviware.soapui.support.GroovyUtilsPro( context )</source>
		<p>GroovyUtilsPro currently includes the following methods:</p>
		<ul>
		<li><code>getGroovySql(String connectionName)</code> - gets groovy.sql.Sql for given connection defined on project level.
		<p>Example:</p>
		<source>
groovy.sql.Sql sql = new com.eviware.soapui.support.GroovyUtilsPro(context).getGroovySql("connName");
sql.eachRow("select id,age,name,surrname from user") {
    println "User: ${it.id}, ${it.name}"
}</source> </li>

		<li><code>getJdbcConnection(String connectionName)</code> - gets java.sql.Connection for given connection defined on project level.
		<p>Example:</p>
		<source>
java.sql.Connection conn = new GroovyUtilsPro(context).getJdbcConnection("connName");
java.sql.PreparedStatement ps = conn.prepareStatement("select id, name from user;")
java.sql.ResultSet rs = ps.executeQuery();
while(rs.next()) {
	println "User: " + rs.getString(1)+", " + rs.getString(2);
}</source> </li>
		</ul>
		(Read more about Database management with Groovy <a href="http://groovy.codehaus.org/Database+features" target="_new">here</a>)
		</subsection>
		
		 <p><hr size="1"/>Next: <a href="propertiesstep.html">Testing Web Services - Property Steps</a></p>
		
		</section>
    </body>
</document>

