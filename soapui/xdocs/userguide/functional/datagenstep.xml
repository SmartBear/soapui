<?xml version="1.0"?>
<!--
  ~ SoapUI, copyright (C) 2004-2008 eviware.com
  ~
  ~ SoapUI is free software; you can redistribute it and/or modify it under the
  ~ terms of version 2.1 of the GNU Lesser General Public License as published by
  ~ the Free Software Foundation.
  ~
  ~ SoapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  ~ even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Lesser General Public License for more details at gnu.org.
  -->

<document>
    <properties>
        <title>userguide - DataGen TestStep</title>
    </properties>
    <body>
		<section name="DataGen TestStep">
		<p>The "DataGen" TestStep can be used to generate data to be used as input in your TestCases, Requests, etc, for
		example number or date sequences, random selections, etc. The generated data is available as properties and can 
		thus be referred to with Property Transfers and Expansions just like any other property. Create a DataGen
        Step as usual from the TestCase popup menu. Double-clicking the TestStep will open the following editor:</p>
		
		<p align="center"><img src="images/datagen_editor.gif" alt="The soapUI Pro DataGen Editor Options"/></p>
		
		<p>The table at the top contains the defined DataGen properties with their common settings (see below) and
		last returned value, selecting a property in the table shows the corresponding 
		configuration panel at the bottom.</p>
		<p>"Running" the DataGen step with the far left toolbar button will re-evaluate all properties and show their
		values in the far right table column.</p>
		<p>Add and delete properties using the toolbar buttons at the top, the Add button opens the following dialog:</p>

		<p align="center"><img src="images/datagen_add.gif" alt="The soapUI Pro DataGen Add Panel"/></p>
		
		<p>The types of property available are currently:</p>
		<ul>
		<li>Script : specifies a property whose value is created by a groovy script</li>
		<li>Template : specified a block of content to be used when building other values</li>
		<li>Number : allows for number-based sequential creation of property values (integers, dates, etc)</li>
		<li>List : specifies a list of possible values to return when the property is read</li>
		</ul>
		
		<subsection name="Script">
		<p>The configuration panel when selecting a Script property is as follows:</p>
		<p align="center"><img src="images/datagen_script.gif" alt="The soapUI Pro DataGen Script property configuration"/></p>
		<p>Specify a groovy script that returns the desired value for the property.
		For example you could create a property that contains today date in a nice format:</p>
		
		<source>def sdf = new java.text.SimpleDateFormat("yyyy-MM-dd")
return sdf.format( new Date())</source>
		
		<p>Anywhere in your TestCase where PropertyExpansions are available, you could use this with ${DataGen#today}, 
		which would be replaced with todays date when used.</p>
		
		</subsection>
		
		<subsection name="Template">
		<p>The Template configuration-panel is equally simple:</p>
		<p align="center"><img src="images/datagen_template.gif" alt="The soapUI Pro DataGen Template property configuration"/></p>
		<p>This type is useful for building complex multiple-line properties, for example to be inserted into requests. 
		Here one can specify any content that can also contain property-expansions, for example</p>
		
		<source>&lt;date&gt;&lt;today&gt;${DataGen#today}&lt;/today&gt;&lt;/date&gt;</source>
		<p>Which would evaluate to an XML element containing todays date when used in conjunction with the above defined script-property.</p>
		</subsection>
		
		<subsection name="Number">
		
		<p align="center"><img src="images/datagen-number.png" alt="The soapUI Pro DataGen Number property configuration"/></p>
		
		<p>This property type is used for generating lists of numbers; the start/end/step values specify the range of the sequence and 
		its increment (or decrement). The pattern specifies how to format the property value using the java 
		<a target="_new" href="http://java.sun.com/javase/6/docs/api/java/text/DecimalFormat.html">DecimalFormat</a>  class 
		(see <a target="_new" href="http://www.exampledepot.com/egs/java.text/FormatNum.html">this page</a> for some examples). 
		Selecting the Random check box will select a random number within the specified range instead 
		(with specified step as modulus). The Persist options will save the last number when saving the project so the sequence can continue 
		at its last value if required, remember to use the -S option when running through the command-line tools to save
		the project after running the tests. At the bottom the next value that will be returned by this property is displayed and
		an option to set this to a specific value is available (these will be disabled if the number is configured to be random).</p>
		
		<p>So for example if you want to generate random USD currencies between 100 and 1000 USD with a 50 USD increment you could specify 
		the following:</p>
		
		<p align="center"><img src="images/datagen-number-example.png" alt="The soapUI Pro DataGen Number example"/></p>
		</subsection> 
		
		<subsection name="List">
		<p>Another straight-forward configuration:</p>
		
		<p align="center"><img src="images/datagen-list.png" alt="The soapUI Pro DataGen List property configuration"/></p>
		
		<p>The above screen shot configures a list of weekdays and sets the property to select a random line each time 
		it is read, if the Randomize check box is not checked, the values are used sequentially.</p>
		</subsection> 
		
		<subsection name="Common Configuration Properties">
		<p>The table listing the properties contains two more configuration possibilities; Mode and Shared.</p>
		<p><b>Mode</b> controls how the property value is evaluated and has two possible values; READ and STEP. READ will 
		re-evaluate the property each time it is referenced. This works ok with (for example) our today property created above 
		and any other property that can/should have its value recreated every time. This may not always be desired though; 
		for example you might be using a Number property to generate a unique ID to use during the entire run of a TestCase. 
		If you are referring to this ID in several requests/scripts/etc, setting it to READ would give you a new value every time, 
		instead of one value that is always the same. In this case set the Mode to STEP and the property will be evaluated when 
		the DataGen TestStep is executed during the execution of the containing TestCase. Please note that before this execution 
		the property will not have any value at all so be sure to put the DataGen before any steps that might be referring to it.</p>
		
		<p><b>Shared</b> controls whether the property should be shared between threads in a LoadTest; maybe you are using a 
		Number property to create unique sequential IDs and also need them to be unique across threads in which case this property 
		is required to be shared, otherwise each thread would create the same sequence of values which would then not be unique 
		across all runs.</p>
		
		</subsection>
		

		 <p><hr size="1"/>Next: <a href="../loadtest/index.html">Load Testing Web Services with soapUI</a></p>
		</section>
    </body>
</document>
