<?xml version="1.0"?>
<!--
  ~ SoapUI, copyright (C) 2004-2008 eviware.com
  ~
  ~ SoapUI is free software; you can redistribute it and/or modify it under the
  ~ terms of version 2.1 of the GNU Lesser General Public License as published by
  ~ the Free Software Foundation.
  ~
  ~ SoapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  ~ even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Lesser General Public License for more details at gnu.org.
  -->

<document>
    <properties>
        <title>userguide - Getting Started with Schema Inference</title>
    </properties>
    <body>
		<section name="Getting Started with Schema Inference">
		<p>This brief tutorial will walk you through using some of the new schema inference functions of 
		soapUI. We'll start out by creating a new project, naming it "Demo Project". We'll be creating a 
		REST service, without an initial WADL file, so check the "Add REST Service" check mark.</p>
		
		<p align="center"><img src="images/inference-1.png"></img></p>
		
		<subsection name="Creating the project and service">
		<p>As a starting point for the service, we have the following URL:<br />
		http://search.yahooapis.com/ImageSearchService/V1/imageSearch?appid=YahooDemo&amp;query=Madonna&amp;output=xml
		<br /><br />
		Check the "Extract Resource/Method" check box, and soapUI will parse the URL, extracting 
		the parameters.</p>
		
		<p align="center"><img src="images/inference-2.png"></img></p>

		<p>Three parameters have been extracted, these are "appid", "query" and "output". We are presented 
		with the choice to place these parameters in either the resource, or the method. For this example, 
		let's place the "query" and "output" parameters in the method, leaving the "appid" parameter in the 
		resource. All methods inherit the parameters from their parent resource, and child resources 
		inherit from their parent resources. Where to place a particular parameter depends on how we wish 
		to structure the service.</p>

		<p align="center"><img src="images/inference-3.png"></img></p>

		<p>Once the resource is created, we are presented with creating a method. The parameters we decided 
		to place in the method are now shown here. Let's change the name of the method and then go on.</p>

		<p align="center"><img src="images/inference-4.png"></img></p>
		</subsection>

		<subsection name="Inferring an XSD schema">
		<p>Now we have a request to work with. The request holds all the parameters defined in one of its 
		ancestors. These parameters have been pre-populated using the default values. Clicking on the green 
		arrow icon submits the request, and we can view the response XML.</p>

		<p align="center"><img src="images/inference-5.png"></img></p>

		<p>The response view has a tab along the bottom that now reads "Schema (conflicts)". This is the 
		inferred schema inspector. It has analyzed the XML response, and is telling us that there are 
		conflicts between the current response and the previously inferred schema. This is as it should 
		be, as no prior schema exists. Clicking on the tab opens the inspector, and allows us to resolve 
		these conflicts. Clicking the "Resolve conflicts" button prompts us with the first conflict and 
		a proposed action, to which we can either accept or decline. Since the response we got looks OK, 
		let's click on "Yes to all" to allow the schema inferrer to automatically resolve all conflicts.</p>

		<p align="center"><img src="images/inference-6.png"></img></p>

		<p align="center"><img src="images/inference-7.png"></img></p>

		<p>If we now click on the "Schemas" tab of the inferred schema inspector, we are shown the 
		inferred schemas for this project. So far we can see one namespace, and the associated XSD 
		schema for it. As this schema is based on only one response we can refine it by making some 
		more requests. While doing so we should try to vary the responses so that they are as different 
		as possible. For instance, we should issue an invalid request so that we can infer the schema for 
		a fault, we should make a request for a query that returns an empty result set (which can be done 
		by setting the query parameter to a random string of characters of sufficient length), etc. While 
		doing this against a working server, we assume the responses will always be valid, so we can check 
		the "Auto-Resolve" check box on the "Conflicts" tab. After a bit of testing, we now see that we 
		have two namespaces listed in the "Schemas" tab. These are "urn:yahoo_srchmi" and "urn:yahoo:api", 
		the latter containing the "Error" element definition.</p>

		<p align="center"><img src="images/inference-8.png"></img></p>

		<p align="center"><img src="images/inference-9.png"></img></p>
		</subsection>

		<subsection name="Using inferred schemas">
		<p>These inferred schemas can be used just like manually created ones. This means that you can use 
		them in assertions to validate your responses. You can export them together with the generated WADL 
		to distribute, or use with other code-generating tools. You can even use them to generate HTML 
		documentation for your service directly out of soapUI.</p>

		<p align="center"><img src="images/inference-10.png"></img></p>
		</subsection>

		<subsection name="Schema for JSON content">
		<p>Schema inference in soapUI works for any content that can be converted into XML internally. 
		That means any response that shows up in the XML view can have a schema. Let's try this now.</p>

		<p>Change the "output" parameters value to "json". This causes the response given from the service 
		to be formatted in JSON instead of XML. For this demonstration, make sure that the "Auto-Resolve" 
		check box in the inferred schema inspector is checked. Issue the request. Once the response has been 
		returned we can view it both in JSON format, and in XML format converted by soapUI. This XML 
		representation is different in structure from the one we got when specifying "xml" as the output type. 
		If we view the inferred schema inspector we can now see a new XSD schema. This is an inferred schema 
		for the JSON response converted to XML. With this it is possible to assert the content of JSON 
		responses.</p>

		<p align="center"><img src="images/inference-11.png"></img></p>

		 <p><hr size="1"/>Next: <a href="index.html">REST Service overview</a></p>
		 </subsection>
		</section>
    </body>
</document>
