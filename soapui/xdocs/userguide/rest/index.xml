<?xml version="1.0"?>
<!--
  ~ SoapUI, copyright (C) 2004-2008 eviware.com
  ~
  ~ SoapUI is free software; you can redistribute it and/or modify it under the
  ~ terms of version 2.1 of the GNU Lesser General Public License as published by
  ~ the Free Software Foundation.
  ~
  ~ SoapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  ~ even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Lesser General Public License for more details at gnu.org.
  -->

<document>
    <properties>
        <title>userguide - soapUI REST Support</title>
    </properties>
    <body>
		<section name="REST Services in soapUI">
		<p>soapUI 2.5 introduces extensive possibilities to invoke and test REST/HTTP services, either starting from a
            <a href="https://wadl.dev.java.net/" target="_new">WADL</a>
        definition or just plain URLs. The REST/HTTP support is divided into two parts:</p>
            <ul>
                <li>A new REST Service / Resource / Method / Request model in the Navigator with corresponding editor windows/popups/etc</li>
                <li>REST-specific TestSteps for integrating REST testing with existing test-functionality</li>
            </ul>
            <p>Mocking of REST services is currently only supported via the possibility to specify a document root
            for serving static content, an upcoming release will have full REST Service mocking functionality.</p>

            <subsection name="The REST Model">
                <p>The model for REST Services in soapUI is closely modeled after the WADL model but does not explicitely
                require a WADL definition. If a REST Services is defined "manually" (without a WADL), the corresponding
                WADL will be automatically generated and can be used for validation, code-generation, etc.</p>
                <p>REST Services in soapUI consist of the following key items:</p>
                <ul>
                   <li><b>Services</b> - corresponds to Interfaces for WSDL, in a WADL this corresponds to the root application
                   element. A Service contains an arbitrary number of heirarchically organized resources.</li>
                   <li><b>Resources</b> - defines an addressable (URI) item that can be parameterized using a number of parameter
                   mechanisms. Resources are created/modified/deleted using standard HTTP methods (PUT,POST,GET,etc) and
                   can be made available in any number of representations (ie states), for example XML, JSON, PDF, etc. Also,
                   resource can contain child resources which will inherit parameter and path information from their
                   parent(s).</li>
                    <li><b>Methods</b> -  A resource in WADL/REST is accessed through a number of Methods. A Method is defined by it's HTTP method, Headers and parameters. The
                    response is usually a representation of the invoked resource.</li>
                    <li><b>Requests</b> - A Request is an instance of a request for a Method. 
                    Resources and Methods define Parameters by name and possibly default values, whereas Requests instantiate these with values.</li>
                    <li><b>Parameters</b> - can be defined on both the Resource and Method level, see more below.</li>
                    <li><b>Representations</b> - are used to define the content of a request or response, see more below.</li>
                </ul>
                <p>A soapUI project can contain any number of both REST and WSDL services, allowing for integrated
                testing of corresponding services.</p>
            </subsection>

            <subsection name="WADL Support">
                <p>soapUI supports WADL in two ways:</p>
                <ol>
                    <li>When defining a new REST Service one can do so from a WADL file/URL, which will import
                    all defined resources and methods. Associated XML Schemas are also imported and
                    used for validations and form-generation in soapUI Pro.</li>
                    <li>When defining a new REST Service without a WADL by "manually" specifying endpoints, paths, parameters, etc
                    soapUI automatically generates a WADL from these configured items.</li>
                </ol>
                <p>In either case, the WADL can be used for code and documentation generation from the WADL Content tab
                in the WADL Service window (see below). Also, defined representations will be used to validate response messages when
                adding SchemaAssertions to REST TestRequest steps.</p>
            </subsection>

            <subsection name="Creating REST Services">
               <p>REST Services can be created in several ways.</p>
                <ul>
                    <li>From a WADL:</li>
                    <ul>
                    <li>By specifying a WADL file or URL in the New Project wizard</li>
                    <li>By selecting the "Add WADL" popup menu option from the Project popup</li>
                        </ul>

                    <li>Manually:</li>
                    <ul>
                        <li>By selecting the "Add REST Service" option in the New Project Wizard</li>
                        <li>Via the "Add REST Service" option from Project Popup</li>
                        </ul>


                </ul>

                <p>When specifying a WADL, soapUI will read the WADL and create the corresponding
                model items in the project. When creating the service manually, the following dialog will be
                shown:</p>
                
                   <p align="center"><img src="images/new-rest-service.gif"></img></p>
                <p>The following options are available:</p>
                <ul>

                    <li><b>Service Name</b> (required) : an arbitrary name for the service</li>
                    <li><b>Service Endpoint</b> : an initial endpoint for the service.</li>
                    <li><b>Extract Resource/Params</b> : will open a dialog for defining an initial Resource and its
                    parameters from the specified endpoint.</li>
                    <li><b>Create Resource</b> : if no endpoint has been specified or "Extract..." has not been selected, this
                    option will open a dialog to create an initial Resource.</li>
                </ul>

                <p>The resource-related options are covered in more detail in <a href="resources.html">Resources</a>.</p>

                </subsection>
            <subsection name="Service Properties and Action">
                <p>Once created, the REST Service has the following properties in the bottom left:</p>
                <ul>
                    <li><b>Name</b> - the name of the REST Service</li>
                    <li><b>Description</b> - a short description of the service</li>
                    <li><b>Base Path</b> - the base path to prepend to all resource paths when sending requests</li>

                    <li><b>WADL</b> - the URL to the originally imported WADL (if available)</li>
                    <il><b>Generated</b> - true if the WADL has been generated instead of imported</il>
                </ul>
                <p>Right-click a REST Service in the navigator opens a popup with the following actions:</p>
                <ul>
                    <li><b>Show Service Viewer</b> - Opens the Service Viewer described below</li>
                    <li><b>Generate TestSuite</b> - Opens a dialog for generating a TestSuite for the service (<a href="#Generate_TestSuite">see below</a>)</li>
                    <li><b>Create Documentation</b> - Prompts to generate HTML documentation for the REST Service which will be opened
                    in an external browser</li>
                    <li><b>WADL2Java</b> - Prompts to run the Wadl2Java tool for generating java classes for the services WADL (see below)</li>
                    <li><b>Export WADL</b> - Prompts to export the WADL and included schemas to the file system</li>
                    <li><b>New Resource</b> - Prompts to create a new Resource in this service</li>
                    <li><b>Delete</b> - Prompts to delete this service</li>
                    <li><b>Online Help</b> - Opens this page in an external browser</li>
                </ul>
            </subsection>

            <subsection name="REST Service Viewer">
               <p>Double-clicking a REST Service opens the REST Service Viewer which is basically layed out as the
               corresponding WSDL Interface viewer:</p>
                <ul>
                    <li>An "Overview" tab showing basic information about the WADL</li>
                    <li>A "Service Endpoints" tab allowing for management of service endpoints and default authentication
                    settings.</li>
                    <li>A "WADL Content" tab displaying the WADL and its references XML-Schemas.
                    </li>
                </ul>
                <p align="center"><img src="images/wadl-content-tab.gif"></img></p>
                <p>The toolbar for this tab contains the following actions (left to right):</p>
                <ul>
                    <li><b>Back</b> - navigates back in the content tree</li>
                    <li><b>Forward</b> - navigates forward in the content tree</li>
                    <li><b>Generate Documentation</b> - prompts to generate HTML documentation for this WADL</li>
                    <li><b>Export WADL</b> - prompts to export the WADL and referenced schemas to a local folder</li>
                    <li><b>Recreate WADL</b> (not shown in screenshot) - for generated WADLs, regenerates the WADL from
                    the defined REST artifacts.</li>
                </ul>


            </subsection>

            <subsection name="Generate TestSuite">
            <p>The "Generate TestSuite" option on the REST Service popup opens the following dialog:</p>
            <p align="center"><img src="images/generate-testsuite.gif"></img></p>
                <p>The options available are:</p>
                <ul>
                         <li><b>TestSuite</b> : target TestSuite or option to create a new one</li>
                    <li><b>Style</b> : how to generate TestCases</li>
                    <li><b>Resources</b> :  a "flattened" list of all resources in the Service</li>
                    <li><b>Generate LoadTest</b> : if a default LoadTest is to be created for each generated TestCase</li>
                 </ul>
                <p>Pressing OK will generate one REST RequestStep for each selected Resource, either all in one TestCase or
                in one TestCase for each.</p>
            </subsection>

            <subsection name="WADL2Java Integration">
              <p>soapUI integrates with the <a href="https://wadl.dev.java.net/wadl2java.html" target="_new">wadl2Java tool</a>
                  included in the WADL toolkit allowing one to generate java code from both imported and generated WADLs. Selecting
              the WADL2Java option on the REST Service popup opens the following dialog:</p>
            <p align="center"><img src="images/wadl2java.gif"></img></p>
                <p>The options in the dialog correspond to those for the tool, once the path to wadl2java has been set in the
                    global tool integration settings and the dialog has been configured as desired, pressing OK will launch the tool
                to generate the corresponding Java classes:</p>
                 <p align="center"><img src="images/wadl2java-result.gif"></img></p>

            </subsection>


		 <p><hr size="1"/>Next: <a href="params.html">REST Parameters and Representations</a></p>
		</section>
    </body>
</document>
