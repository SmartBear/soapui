<?xml version="1.0"?>
<!--
  ~ SoapUI, copyright (C) 2004-2008 eviware.com
  ~
  ~ SoapUI is free software; you can redistribute it and/or modify it under the
  ~ terms of version 2.1 of the GNU Lesser General Public License as published by
  ~ the Free Software Foundation.
  ~
  ~ SoapUI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
  ~ even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  ~ See the GNU Lesser General Public License for more details at gnu.org.
  -->

<document>
    <properties>
        <title>userguide - soapUI REST Requests</title>
    </properties>
    <body>
		<section name="REST Requests in soapUI">
		<p>A REST Request in soapUI defines an HTTP call to
        the containing Resource using the containing Method. It specifies Parameters, Message Content, Attachments, etc.
        Requests are created either directly when creating Resources via the "Create Request" option in the "New Resource"
        dialog, or alternatively from the "New Request" Method popup which prompts for an initial name and
        if to open the request editor:</p>
            <p align="center"><img src="images/new-rest-request.gif"></img></p>

        <p>soapUI has built in support for visualizing both JSON and XML responses, and also internally converts HTML and JSON
        responses to XML so they can be used in functional tests together with other related features (property-transfers,
        xpath assertions, etc).</p>    

         <subsection name="Properties and Actions">

          <p>A REST Request has the following properties at the bottom left when selected in the Navigator:</p>
          <ul>
              <li><b>Name</b> - the name of the Request</li>
              <li><b>Description</b> - a description for the Request</li>
              <li><b>Encoding</b> - the encoding for the message body (if PUT or POST)</li>
              <li><b>Endpoint</b> - the target endpoint for the request</li>
              <li><b>Bind Address</b> - the local ip-address to bind to when sending the request</li>
              <li><b>Follow Redirects</b> - option to follow HTTP Redirect response returned by the target server</li>
              <li><b>Username</b> - Username to use in HTTP Authentication challenges</li>
              <li><b>Password</b> - Password to use in HTTP Authentication challenges</li>
              <li><b>Domain</b> - Domain to use in HTTP Authentication challenges</li>
              <li><b>SSL Keystore</b> - Alternative client keystore to use, must be defined in project WSS certificates tab</li>
              <li><b>Strip Whitespaces</b> - Option to strip outgoing XML message content of whitespace</li>
              <li><b>Remove Empty Content</b>- Option to remove empty elements from outgoing message content</li>
              <li><b>Entitize Properties</b> - Entitize property values expanded in outgoing message content</li>
              <li><b>Pretty Print</b> - Pretty print response XML</li>
              <li><b>Dump File</b> - Local file to which the response should be written</li>
          </ul>
           <p>The following actions are available from the REST Request popup:</p>

             <ul>
                 <li><b>Show Request Editor</b> - opens request editor described below</li>
                 <li><b>Add to TestCase</b> - prompts to add this REST Request to a TestCase as a REST RequestStep</li>
                 <li><b>Clone Request</b> - prompts to clone the Request</li>
                 <li><b>Rename</b> - prompts to rename the Request</li>
                 <li><b>Delete</b> - prompts to delete the Request</li>
                 <li><b>Online Help</b> - shows this page in a browser</li>
             </ul>

            </subsection>

            <subsection name="REST Request Editor">
                <p>The REST Request editor is opened by double-clicking a REST Request or selecting the corresponding
                popup menu item:</p>
                 <p align="center"><img src="images/rest-request-editor.gif"></img></p>
                <p>The editor shares much of its concepts with the WSDL Request editor:</p>
                <ul>
                    <li>Request/Response areas to the left and right with corresponding editors (vertical tabs) and
                    inspectors (tabs at the bottom of the editors).</li>
                    <li>A top toolbar for submitting and configuring the request endpoint</li>
                </ul>
                <p>Many of the inspectors are the same as for WSDL Requests and will not be covered here in any detail.</p>

                <p>The top toolbar has two levels of which the second contains the following left-to-right options:</p>
                <ul>
                    <li><b>Accept</b> - a drop-down for selecting the desired accept-encoding. This will be pre-populated
                    with the mediaTypes defined by all response representations for the request</li>
                    <li><b>Full path</b> - a label with tooltip showing the actual endpoint URL that would be used
                    for the request.</li>
                </ul>

                <p>The default Request editor has a Parameters table as <a href="params.html">described previously</a> for defining
                parameters and their values. If POST or PUT has been chosen as method, a message-body area is made
                available below the parameters table:</p>
                  <p align="center"><img src="images/rest-body-editor.gif"></img></p>
                <p>The toolbar for this are contains the following options (left to right)</p>
                <ul>
                    <li><b>MediaType</b> - drop-down containing MediaTypes of defined Request Representations and
                    also the multipart/form-data type which can be used to simulate a file-submit of an HTML form;
                    selecting this option will add all parameters and File Attachments of the request as Mime Parts
                    in a Multipart request.</li>
                    <li><b>Recreate Body</b> - action to recreate the content of the body from the corresponding
                    schemaElement referred to by a Representation with the selected MediaType; if selecting a mediaType
                    whose representation(s) specify an element in a referenced XML Schema, this action will be enabled
                    and prompt to generate a default message based on the schema definition.</li>
                    <li><b>POST QueryString</b> - option to put Query Arguments in the message body instead of after the
                    path part of the URL; this is for simulating the behaviour of a standard HTML Form submitted with POST.</li>
                </ul>

            </subsection>

            <subsection name="Representations and Attachments">
                <p>Request/Response Representations are defined and available via their corresponding inspectors at the bottom
                of the request/response editors and are used as <a href="params.html#REST_Representations">already described</a>.</p>
                <p>Attachments are used in several ways;</p>
                <ul>
                    <li>If the method is PUT or POST and the mediaType of the body is the same as that of a request attachment,
                    that attachment is inserted into the message body instead</li>
                    <li>If the method is PUT or POST and the mediaType of the body is the same as that of several request attachments,
                    these attachments are sent as a Multipart body</li>
                    <li>If the method is PUT or POST and the mediaType is multipart/form-data, all query parameters and request
                    attachments are sent as Mime Parts in a Multipart body.</li>
                </ul>

            </subsection>

            <subsection name="Response Handling">
                <p>Response received for a Request are displayed to the right. JSON responses have a dedicated
                viewer which pretty-prints the result:</p>
                <p align="center"><img src="images/json-viewer.gif"></img></p>
               <p>Internally both JSON and HTML results get converted to XML which allows them to be inspected using the
               soapUI Pro inspectors, for example the Table Inspector:</p>
                <p align="center"><img src="images/rest-xml-table-response-view.gif"></img></p>
               <p>Or the soapUI Pro Overview view:</p>
                <p align="center"><img src="images/rest-overview-response-view.gif"></img></p>
            </subsection>
            
            <subsection name="HTML Response View">
            <p>The HTML Response view tries to disply the response using the bundled JXBrowser component (which wraps Mozilla 3), so for
            example you can use it to view both images:</p>
            <p align="center"><img src="images/html-response-view-gif.gif"></img></p>
            <p>complex HTML:</p>
             <p align="center"><img src="images/html-response-view-html.gif"></img></p>
             <p>(any format supported by the browser is displayed; flash movies, SVG, etc.</p>
            </subsection>

            <subsection name="SoapUI Pro Form Editor">
            <p>soapUI Pro enhances REST requests in the same way as WSDL requests:</p>
                <ul>
                    <li>By providing Form / Outline / Overview views of requests and responses</li>
                    <li>By providing a number of inspectors for response message content</li>
                </ul>
                <p>The Pro Form editor renders an input-friendly form for the defined parameters and
                also provides a Form-based editor for request XML representations that are defined
                in an included XML Schema. For example the following Form:</p>
                <p align="center"><img src="images/pro-form-editor.gif"></img></p>
                <p>The parameters are rendered as configured in their Details tab, the lower part contains
                a drop-down for selecting from the representations that have a corresponding element. Once
                selected, the corresponding form will be rendered (as shown in the screenshot).</p>
            </subsection>


		 <p><hr size="1"/>Next: <a href="inference.html">WADL and XSD inference</a></p>
		</section>
    </body>
</document>
