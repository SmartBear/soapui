<?xml version="1.0"?>
<document>
    <properties>
        <title>Web Service Mocking - Responses from WSDL</title>
    </properties>
    <body>
		<section name="Mock Responses">
		<p>A MockResponse is where you send the simulated response from the MockService. It holds an actual response to returned from 
		a MockOperation. The response is very powerful and can be configured in regards to response content, http headers, attachments and dynamic 
		processing using groovy (for example to process the input or read data from some external source).</p>
		<p>MockResponses are added to a MockOperation from their popup menu or from the Request popup/editor 
		with the "Add to MockService" action/button.</p>
		
		<subsection name="MockResponse Actions">
		<columns>
		<column><div>Right clicking a MockResponse node in the navigator or in the MockOperation editor 
		shows a popup menu with the following actions:</div>
		<ul>
		<li><b>Open MockResponse Editor</b> - opens the MockResponse Editor, see below</li>
		<li><b>Open Request</b> - prompts to open the editor for an existing request for this MockResponses MockOperation with 
		the correct local endpoint.</li>
		<li><b>Add to TestCase</b> - prompts to add a corresponding MockResponse Step to a TestCase</li>
		<li><b>Create TestRequest</b> - prompts for TestCase where to create MockResponse TestStep</li>
		<li><b>Clone</b> - prompts to clone the MockResponse</li>
		<li><b>Rename</b> - prompts to rename the MockResponse</li>
		<li><b>Remove</b> - prompts to remove the MockResponse</li>
		<li><b>Online Help</b> - displays this page in an external browser</li>
		</ul>
		</column></columns>
		</subsection>
		
		<subsection name="MockResponse Details Tab">
			The bottom left details tab for a MockResponse displays the following properties:
			<ul>
				<li><b>Name</b> - the name of the MockResponse</li>
				<li><b>Description</b> - an arbitrary description of this MockResponse</li>
				<li><b>Message Size</b> - shows the size of the current response message content (in characters)</li>
				<li><b>Encoding</b> - the encoding to use for the content of the MockResponse message.</li>
				<li><b>Outgoing WSS</b> : the project-level Outgoing WSS configuration that should be applied to the response</li>
				<li><b>Enable MTOM/Inline</b> - enables MTOM/Inline processing for MockResponse messages in the same way as 
				described for <a href="../attachments.html">Request Attachments</a></li>
				<li><b>Force MTOM</b> - always returns MTOM packaged responses, even if there are no MTOM attachments in response.</li>
				<li><b>Enable Multiparts</b> - enables multiparts in the same way as described for 
				<a href="../attachments.html#Multipart_Attachments">Multipart Attachments</a></li>
				<li><b>Encode Attachments</b> : Tells soapUI to automatically encode attachments that have a corresponding WSDL part with 
				  the xsd-type set to either base6Binary or hexBinary.</li>
				<li><b>Strip Whitespaces</b> : Strips outgoing responses of any unnecessary whitespaces and xml comments, required by some servers.</li>
				<li><b>Remove Empty Content</b> : Removes empty elements/attributes from outgoing responses.</li>
				<li><b>Entitize Properties</b> : Entitize expanded property values</li>
				<li><b>Response HTTP-Status</b> : (read only) show http response status</li>
				<li><b>Response Delay</b> : Waits the specified number of milliseconds before returning the response.</li>
				<li><b>WS-Addressing</b>  : enables/disables ws-addressing.</li>
			</ul>
		</subsection>
		
		<subsection name="The MockResponse Editor">
		<p>Double-clicking a MockResponse in the navigator or MockOperation editor opens the 
		MockResponse editor as seen below:</p>
		<p align="center"><img src="images/mockresponseeditor.gif" alt="Manual editing of a simulated Web Service Response"/></p>
		<p>This editor is more or less a copy of the standard request editor, but shifts focus to the right-hand response area where the MockResponse is configured. The left hand
		request area shows the latest request handled by this MockResponse, including its HTTP Headers 
		and Attachments.</p>
		<p>The Response Area contains the same 
		<a href="../requests.html#XML_Source_Editor">XML Source editor</a>, 
		<a href="../requests.html#HTTP_Headers">HTTP Headers</a> tab and 
		<a href="../attachments.html">Attachments</a> tab 
		as in the Request Editor (but now all editable). Additionally, a "Response Script" tab is available 
		that displays a Groovy script editor for creating scripts that should be executed before 
		returning the actual response content (see more below).</p>
		</subsection>
		
		<subsection name="MockResponse Editor Toolbar">
		<p align="center"><img src="images/mockresponseeditor_toolbar.gif" alt="SoapUI MockResponse toolbar"/></p>
		<p>The toolbar at the top of the MockResponse editor contains the following actions (left to right):</p>
		<ul>
		<li><b>Open Request</b> - Opens a new or existing request that can be issued to this MockOperation
		when its MockService is running, the request will have the correct local endpoint set automatically.</li>
		<li><b>Recreate Response</b> - Prompts to create a default response message from the associated WSDL/Schema 
		definition</li>
		<li><b>Create Empty Response</b> - Prompts to create an empty SOAP response message</li>
		<li><b>Create SOAP Fault</b> - Prompts to creates an empty SOAP Fault, if the operation being mocked
		defines any faults, soapUI will prompt for which of these to generate en default detail element;</li>
		<li><b>Toggle Layout</b> - toggles between the available split/tab layouts as described in 
		<a href="../requests.html#Editor_Layouts">Editor Layouts</a>.</li>
		<li><b>Online Help</b> - shows this document in an external browser.</li>
		</ul>
		</subsection>
		
		<subsection name="Response Scripts">
		<p>The "Response Script" tab shows a standard Groovy editor for a script that will be executed prior
		to returning the configured response message, opening for the possibility to create response specific
		scripts that can dynamically create content of the outgoing response.</p>
		<p align="center"><img src="images/mockresponse_scripteditor.gif" alt="Editing simulated Web Service Response Scripts"/></p>
		<p>The script has access to the following objects:</p>
		<ul>
		<li><code>log</code> - a standard log4j Logger for logging arbitrary information to the groovy log</li>
		<li><code>context</code> - an instance of 
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/model/mock/MockRunContext.html">MockRunContext</a>
		that can hold dynamically user-defined properties. The context is service scoped, i.e. shared between
		all MockOperations/MockResponses for a MockService during its lifetime. Since this object implements the <code>Map</code> interface
		it can be accessed using Groovy's built-in collection support (see example screenshot above)</li>
		<li><code>requestContext</code> - an instance of 
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/model/mock/MockRunContext.html">MockRunContext</a>
		that can hold dynamically user-defined properties. The context is request scoped, i.e. is only available during this
		request and not shared with other MockOperations. Use this to pass values from the dispatch script to the handling
		MockResponse. Since this object implements the <code>Map</code> interface
		it can be accessed using Groovyâ€™s built-in collection support.</li>
		<li><code>mockRequest</code> - an instance of
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/impl/wsdl/mock/WsdlMockRequest.html">WsdlMockRequest</a>
		which provides access to request-related objects, including the underlying HttpServletRequest/HttpServletResponse objects</li>?
		<li><code>mockResponse</code> - an instance of
		<a target="_new" href="http://www.soapui.org/apidocs/index.html?com/eviware/soapui/impl/wsdl/mock/WsdlMockResponse.html">WsdlMockResponse</a>
		which provides access to the current MockResponse object (for example for dynamic manipulation of attachments)</li>
		</ul>		
		<p>The Run button in the script toolbar will attempt to run the script, setting the context to either the currently available 
		context	(if the MockService is running) or an empty one. The MockRequest will be set to the last handled request if available. </p>
		<p>Properties set in the context can then be used using standard property expansion in the response, for example the 
		following script:</p>
		<source>context.randomValue = Math.random()</source>
		<p>creates a "randomValue" property which can then be "used" in the outgoing response:</p>
		<source>&lt;detail&gt;${randomValue}&lt;/detail&gt;</source>
		</subsection>
				
		<subsection name="WS-A Properties">
		<p>The WS-A Inspector displays properties used for adding WS-A headers to a MockResponse 
		according to <a href="http://www.w3.org/Submission/ws-addressing/#_Toc77464322">WS Addressing specification</a></p>
		<li>Enable WS-A Addressing</li>
		<li>Must understand indicates whether a header entry is mandatory or optional for the recipient to process.</li>
		<li>Add default WS-A:Action indicates if by default generated action is to be added to request/mock response.</li>
		<li>Action - specifies the value of the Action property. If not specified, and 'Add default WS-A:Action is checked' , 
		default action from WSDL will be generated and added. Although Action property is mandatory by <a href="http://www.w3.org/TR/ws-addr-core/#msgaddrpropsinfoset" target="_new">WS-A core specification</a> 
		by checking previous check box and leaving this empty it is possible for action property to be left unspecified for testing purposes. </li>
		<li>Add default WS-A:To indicates if default To is to be added to request/mock response.</li>
		<li>To - OPTIONAL element specifies the value of the To property</li>
		<li>RelatesTo- OPTIONAL element specifies the value of the RelatesTo property. If not specified, and WS-A Settings (see <a href="../preferences.html#WS-A_Settings">Preferences</a>)
		'Use default RelatesTo' is checked , default value of 'http://www.w3.org/2005/08/addressing/unspecified' will be used.</li>
		<li>RelationshipType- OPTIONAL element specifies the value of the RelationshipType property. If not specified, and WS-A Settings (see <a href="../preferences.html#WS-A_Settings">Preferences</a>)
		'Use default RelationshipType' is checked , default value of 'http://www.w3.org/2005/08/addressing/reply' will be used.</li>
		
		<li>From - OPTIONAL element specifies the value of the From property</li>
		<li>FaultTo - OPTIONAL element specifies the value of the FaultTo property</li>
		<li>ReplyTo - OPTIONAL element specifies the value of the ReplyTo property</li>
		<li>Generate MessageID - indicates if messageId should be randomly generated</li>
		<li>MessageID - OPTIONAL element specifies the value of the MessageID property. If not specified, and previous check box is 
		checked , random MessageID will be generated for RequestResponse operation.</li>
		<p align="center"><img src="images/wsa_inspector.gif" alt="Viewing header properties in WS-A Inspector"/></p>
		</subsection>

		

		 <p><hr size="1"/>Next: <a href="mock_as_war.html">Deploy Mock As War</a></p>
		</section>
    </body>
</document>

