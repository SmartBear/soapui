<?xml version="1.0"?>
<document>
    <properties>
        <title>web service testing - soapUI 2.0</title>
    </properties>
    <body>
		<section name="SoapUI 2.0 new features!">
		<p>Welcome to soapUI 2.0! For the big two oh we have lined up a number of features that 
		significantly extends what you can do with soapUI. </p>
 		<p><i>As always, make backups of your project files before switching and let us know if you have any issues!</i></p>
		<table class="webstartlinkstable">
		<tr>
		        <td align="center" bgcolor="white"><span class="webstartheader">soapUI 2.0.2</span><div>
				<a href="http://www.soapui.org/jnlp/2.0.1/soapui.jnlp" urchinTracker="/jnlp/soapui/2_0_2"><img class="webstart" src="images/webstart_green.png" border="0" alt="SoapUI WebStart"/></a></div>
			 [<a target="_new" href="http://sourceforge.net/project/showfiles.php?group_id=136013&amp;package_id=163662&amp;release_id=571745">Download</a>]</td>
			 <td align="center" bgcolor="white"><span class="webstartheader">soapUI 2.0.2 Pro</span><div>
				<a href="http://www.eviware.com/jnlp/2.0.1/soapui-pro.jnlp" urchinTracker="/jnlp/soapui/2_0_2-pro"><img class="webstart" src="images/webstart_orange.png" border="0" alt="SoapUI Pro WebStart"/></a></div>
			  
			 [<a target="_new" href="http://www.eviware.com" class="externalLink" title="External Link">Trial/Buy</a>]

              
			 [<a target="_new" href="http://www.eviware.com/content/view/42/36/">soapUI FAQ</a>]</td>
	
			</tr>
		</table> 
		
		<p>
		The most notable improvements to both soapUI and soapUI Pro are described below, on top of these are a large number of bug fixes, minor UI improvements.
		</p>
		
		<subsection name="SoapUI Movies">
			<div>
			<p>
				In order for you to be able to see some of the more complex functionality in action we have created some simple movies.
			</p>
			<p>
			<br/>
				<ul STYLE="list-style-image: url(images/film.png)">
					<li><a href="#" onclick="openVideo('movies/WSDL_Refactoring/WSDL_Refactoring.html');"><b>WSDL Refactoring with soapUI</b> (soapUI Pro)</a></li>
					<li><a href="#" onclick="openVideo('movies/wsdl_coverage/wsdl_coverage.html');"><b>WSDL Coverage  in soapUI</b> (soapUI Pro)</a></li>
					<li><a href="#" onclick="openVideo('movies/SOAP_Monitor/SOAP_Monitor.html');"><b>SOAP Monitor in soapUI</b></a></li>
				</ul>
			<br/>
			</p>
			</div>		
		</subsection> 
		
		
						
				<table class="relatedInfo" cellspacing="0" cellpadding="0">
	<tr class="a">
    	<td width="75" style="padding-top:5px">
        	<img src="../../images/where_do_i_start.jpg" alt="Start soapUI Testing" longdesc="http://www.soapui.org"></img>
        </td>
        <td>
            <table class="relatedInner">
              <tr>
                <td>
                	<span class="relatedInfoHeader">Did you know?</span>
                </td>
              </tr>
              <tr>
                <td>
                    <div>
						<p>
						soapUI Pro 2 includes <b><i>Web Service Coverage</i></b>. See how well tested your Web Services are!
						</p>
						<p>
						<b><i>soapUI Pro</i></b> contains productivity enhancements as well as offers Professional World Class support.
						</p>
                    </div>
                </td>
              </tr>
              <tr align="right">
              	<td>
                	<span class="relatedLinks"><a href="http://www.eviware.com/component/option,com_wrapper/Itemid,41/" title="try soapUI Pro" onclick="javascript:urchinTracker:('/downloadTrial');">
                                               <img src="../../images/try_pro_100.png" alt="Try soapUI pro to soap test" width="101" height="20" longdesc="http://www.eviware.com"/></a></span>
                </td>
              </tr>
            </table>
		</td>
	</tr>
</table>

		
		

		
		<subsection name="SoapUI 2.0.2 Release">
		<p>The 2.0.2 release is mainly another bug-fix release with a small number of improvements and
		also includes updated version of all IDE / maven plugins;</p>
		<ul>
			<li>Fixed -n option for commandline LoadTestRunner (was incorrectly -h)</li>
			<li>Fixed internal initialization of copied/cloned testcases/teststeps and during Load Testing</li>
			<li>Improved Aut/Header inspectors to be visible for form/overview views</li>
			<li>Fixed quoting of SOAP 1.2 Action in content-type header</li>
			<li>Improved opening of local files in external browser (reports, etc)</li>
			<li>Fixed initialization of custom RequestFilters </li>
			<li>Fixed script-evaluation in MockResponses to allow modification of the responseContent</li>
			<li>Fixed logging/display of failed MockRequests</li>
			<li>Fixed caching of external WSDLs in SchemaComplianceAssertion if another URL was used</li>
			<li>Fixed attribute handling with wildcards</li>
			<li>Fixed NPE on empty response messages</li>
			<li>Fixed a number of typos</li>
			<li>Updated to trunk version of XMLBeans which fixes corruption of project-files on save</li>
			<li>Updated to full version of xercesImpl 2.9.1 for full JAXP functionality</li>
			<li>etc..</li>
		</ul>
		<p>soapUI Pro-specific updates:</p>
		<ul>
		    <li>Fixed Get Data popup in MockResponse editors</li>
		    <li>Added support for description column when importing/exporting requirements</li>
		    <li>etc..</li>
		</ul>
		</subsection>
		
		<subsection name="SoapUI 2.0.1 Release">
		<p>The 2.0.1 release is mainly a bug-fix release but also includes a small number of improvements:</p>
		
		<ul>
		<li> Updated Groovy to 1.5.1</li>
		<li> Fixed Keystore-initialization to use specified provider</li>
		<li> Fixed NPE when initializing properties</li>
		<li> Fixed corruption of PropertyTransfer, ConditionalGoto and RunTestCase teststeps</li>
		<li> Fixed invalid Regular Expression in XSDs to get discarded and show a warning</li>
		<li> Fixed parallel execution of TestCases in TestSuites</li>
		<li> Fixed encoding-problems when compiling Groovy Scripts</li>
		<li> Added support for %20 as space-delimiter in command-line arguments (for Unix/linux)</li>
		<li> Fixed check to recreate messages when updating interface</li>
		<li> Fixed global properties as PropertyTransfer targets</li>
		<li> Fixed NPE:s in related to TestCase and MockService logs</li>
		<li> Fixed DnD of requests to TestCases</li>
		<li> Memory fixes</li>
		<li> etc..</li>
		</ul>
		
		<p>soapUI Pro has the following additional fixes/improvements</p>
		<ul>
		<li> Fixed generation of indexed XPath expressions</li>
		<li> Fixed refactoring issues with namespaces and multiple updates</li>
		<li> Improved WSDL Coverage:
		<ul>
		<li> Added possibility to exclude elements from coverage calculation</li>
		<li> Fixed handling of empty elements</li>
		<li> Moved settings to be at project-level</li>
		</ul></li>
		<li> Added option to skip to closing DataSource Loop when no data is available in a DataSource 
  TestStep  </li>
  		<li> Improved import/export of requirements to include testcases and links</li>
		<li> etc..</li>
		
		</ul>
		<p>As always thanks to all of you that have reported issues and helped us track them down!</p>
		
		</subsection>
		
				
		<subsection name="New and Noteworthy in the soapUI 2 Final Release">
				<div>
					<p><b>Final Fixes</b></p>
					<p>
						beta2 proved relatively stable so, there were few updates. Fixes were done to
						<ul>
							<li>Coverage</li>
							<li>Refactoring</li>
							<li>LoadTests</li>
							<li>Security</li>				
						</ul>
					</p>	
				</div>
		</subsection> 
		
		<subsection name="New and Noteworthy in soapUI 2 beta2">
			<newfeature img="images/2/coverage_run_log.gif">
				<div>
					<p><b>Web Service Coverage Updated!</b></p>
					<p>
						We have made some major and some minor upgrades to Web Service Coverage, 
						especially concerning Assertion Coverage.
						<ul>
							<li>Updated Assertions Parsing to be more accurate</li>
							<li>Performance Updates</li>
							<li>Coverage now takes disabled TestSteps into consideration</li>
							<li>Added Message Content Inspector</li>
							<li>Spiffed up Run Log</li>				
						</ul>
					</p>	
				</div>
			</newfeature>
			
			<newfeature img="images/2/wsdl_refactoring_updated.gif" alt="wsdl refactory update with soap test">
				<div>
					<p><b>WSDL Refactoring Updated!</b></p>
					<p>
     					We have made some very major and some minor upgrades to WSDL Refactoring, making 
     					WSDL Refactoring more robust, versatile and usable.
					</p>	
				</div>
			</newfeature>

		<newfeature img="images/2/wss_request.gif" alt="wss request">
				<div>
					<p><b>Aut Inspector</b></p>
					<p>
     					For easy access to authentication-related settings this new Inspector provides a form with
     					corresponding fields from the request properties table.
					</p>	
				</div>
			</newfeature>
		
		<newfeature img="images/2/ws-security_tab.gif">
				<div>
					<p><b>WS-Security Remade!</b></p>
					<p>
					We weren't pleased with WS-Security in beta 1 and have updated it extensively.
					</p>
					<p>
						The following improvements have been made:
						<ul>
						<li>WS-Security configurations are now managed at the project-level from the WS-Security Tab
						in the Project Viewer. Here you configure three types of components:
						<ol>
						<li>Keystores/Certificates : Keystores, Key-files, certificates, etc... that are used for signing and en/de-cryption.</li>
						<li>Incoming WSS configurations : Configurations that can be associated with incoming messages: 
						Request-Responses, Mock-Requests and Monitor-Requests/Responses for decrypting, verification, etc.</li>
						<li>Outgoing WSS configurations : Configurations that can be associated with outgoing messages:
						Requests and MockResponses. These are further assembled from an arbitrary number of entries for 
						encryption, signatures, etc..</li>
						</ol></li>
						<li>You then refer to these configurations in the requests and responses either from the new "Aut" inspector
						which handles all authentication-related settings for a request, or from dedicated Property-editors/fields</li>
						<li>MockServices can have an associated Incoming WSS configuration that will be used to decrypt any incoming
						messages before they are dispatched which may be necessary for correct dispatch if the entire message content
						is encrypted.</li>
						<li>SOAP Monitors can have associated Incoming WSS configurations for decrypting/verifying both 
						incoming requests to the target service and for the corresponding response, making it easy to see 
						encrypted data, etc..</li>
						<li>We have also updated significantly the scope of the WS-Security Standard we support; bith Signature
						and Encryption entries have been extended with a large number of settings related to algorithms, content, tokens, etc...</li>
						<li>A WSS Assertion has been added to the list of possible response assertions for checking that a
						response has valid WS-Security content</li>
						<li>Support for extended UsernameToken password hashing</li>
						</ul>
					</p>	
					<p>Please note that the beta1 WSS-related configurations will be lost and will have to be manually /recreated with the 
					new features, sorry for any inconvenience this may cause.</p>
					
				</div>
		</newfeature>
		<newfeature img="images/2/interface_overview.gif" alt=" soap test interface overview">
				<div>
					<p><b>Interface viewer expanded</b></p>
					<p>
					The Interface Viewer now sports four tabs.
					</p>
					<p>
						<ol>
						<li>Overview. A nice overview of the interface, it is an easy way of for example seeing if the 
						interface is Document/Literal.</li>
						<li>Service Endpoints. The Service Endpoint Editor was available by right-clicking the 
						interface before but is now in a non-modal tab which we think increases usability. Also, it is now
						possible to associate default incoming/outgoing WSS configurations (see above) with an endpoint.</li>
						<li>WSDL Content. The Old inspector, view the WSDL.</li>
						<li> WS-I Compliance. This was, as Service Endpoints, available in the Interface context menu, 
						but is added for usability reasons.</li>
						</ol>
					</p>	
				</div>
		</newfeature>
		
		<newfeature img="images/2/testcaselog.gif" alt="soap test log">
				<div>
					<p><b>TestCase Log spiffed up</b></p>
					<p>
					The Interface Viewer now sports four tabs.
					</p>
					<p>
					This is no major update, but we realized a lot of users did not know that the log 
					was clickable, so we made all clickable steps blue and underlined to signify clickability.
					</p>	
				</div>
		</newfeature>
		
		<newfeature img="images/2/rawview.gif" alt="Raw view in soapUI">
		<div>A new read-only "Raw" editor tab has been added to both request and response editors displaying the actual content
		of the underlying request/response as it was last transmitted over the wire. This can be great help when trying 
		to debug property-transfers/expansions, WS-Security configurations, etc.. </div>
		</newfeature>
		
		<newfeature img="images/2/loadteststats.gif" alt="soap test raw editor">
		<div>LoadTests can now continuously export statistics to comma-separated files for manuall processing/reporting in 
		Excel, etc...</div>
		</newfeature>
		
		<newfeature img="images/2/logmessageinspector.gif" alt="soap test log message inspector">
		<div>The message-viewer available for logged messages has been enhanced to show request/response messages with the
		"standard" message editors, including all inspectors, etc..</div>		
		</newfeature>
		
		<newfeature>
		<h4>Minor improvements/additions:</h4>
		<ul>
		<li>Option to not send the SOAP-Action header in outgoing requests for "REST"-like requests</li>
		<li>TestCase timeout setting (in the TestCase Options dialog) for setting a timeout after which the TestCase fails</li>
		<li>Request-level pretty-printing via a "Pretty Print" property in the request properties list</li>
		<li>Option to cancel running TestCases when a LoadTest reaches its limit</li>
		<li>Updated BouncyCastle to 1.3.8 and not-yet-commons-ssl to 0.3.9 with removed single-key validation</li>
		<li>etc... etc...</li>
		</ul>
		<p>And of course a bunch of bug-fixes.. Thank you to all who helped us test and improve!!</p>
		</newfeature>
		
		</subsection> 
		
		<subsection name="New and Noteworthy in soapUI beta1">
		
			<newfeature img="images/2/crypto.gif" alt="soap test soapuI beta1">
				<div>
					<p><b>WS-Security</b></p>
					<p>
						In soapUI 2.0 beta 1 we introduce initial support for Web Service Security. soapUI 2.0 final will have support for the following WS-Security standards;

						<ul>
							<li>OASIS Web Services Security: SOAP Message Security 1.0 Standard 200401, March 2004</li>
							<li>Username Token profile V1.0</li>
							<li>X.509 Token Profile V1.0</li>
						</ul>
					</p>
					<p>	
						The addition of WS-Security support in soapUI makes it possible for soapUI users to;
						<ul>
							<li>Sign Web Service Messages</li>
							<li>Encrypt/Decrypt Web Service Messages</li>
							<li>Authenticate through the usage of tokens</li>
							<li>Use SAML Assertion insertion</li>
						</ul>
					</p>
					<p>Please evaluate and come back with feedback on how we can improve the interface</p>
 				</div>
			</newfeature>
			
			<newfeature img="images/2/SOAPMon.gif" alt="soap test capturing and recording">
				<div>
					<p><b>Message Capturing and Recording</b></p>
					
					<p>
					<br/>
						<ul STYLE="list-style-image: url(images/film.png)">
							<li><a href="#" onclick="openVideo('movies/SOAP_Monitor/SOAP_Monitor.html');"><b>View movie</b></a></li>
						</ul>
					<br/>
					</p>
					
					<p>
						soapUI 2.0 beta 1 contains a SOAP Monitor for capturing live traffic. 
						The SOAP Monitor can be run in both Tunnel and Proxy Modes. From the traffic captured in soapUI SOAP Monitor you can;
						<ul>
							<li>Create requests</li>
							<li>Create TestCases</li>
							<li>Create MockServices</li>
						</ul>
					</p>
 				</div>
 				<div>
 				<p><b>Launch it by right-clicking a project and choose "soap test Launch SOAP Monitor"</b></p>
 				</div>
			</newfeature>
			
		<newfeature img="images/2/MemoryMonitor.gif" alt="soap test launch Soap Monitor">
		<div>					
			<p><b>Memory Log</b></p>
			<p>
			As a complement to the test quality inspectors in soapUI, we now introduce the Memory Log. The Memory Log will enable you to monitor Memory Consumption during tests.
			</p>
		</div>
		</newfeature>
			
			<newfeature img="images/2/RunTestCaseTestStep.gif" alt="soap test memory log">
				<div>
					<p><b>Run TestCase TestStep</b></p>
					<p>
						We have long looked for a way of building chains of tests where TestCases depend in each other. The solution is here in the form of the Run TestCase TestStep. 
						The Run TestCase TestStep allows parameter input and output.
					</p>
 				</div>
			</newfeature>

			<newfeature img="images/2/TestStepStartScript.gif">
				<div>
					<p><b>Setup and Teardown scripts</b></p>
					<p>
						Any TestSuite or TestCase can now have Setup and Teardown scripts just like Unit tests. 
						These scripts can be used to create time stamps, write test results to a file or even send mail!
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/disableTestCase.gif" alt="soap test set up and Teardown scripts">
				<div>
					<p><b>Disable TestCase</b></p>
					<p>
						You can now disable TestCases in order to skip them in TestSuite runs.
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/disableAssertion.gif" alt="disable TestCases">
				<div>
					<p><b>Disable Assertion</b></p>
					<p>
						You can now disable assertions in TestSteps.
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/disableTestSuite.gif" Alt="soap test disable assertion">
				<div>
					<p><b>Disable TestSuite</b></p>
					<p>
						You can now disable TestSuites. This will enable you to skip TestSuites in Command Line tests as well in WSDL Coverage analysis(WSDL is Pro only). 
					</p>
 				</div>
			</newfeature>	
			
			<newfeature img="images/2/mockSSL.gif" alt="soap test">
				<div>
					<p><b>MockService SSL Support</b></p>
					<p>
						soapUI MockServices now supports SSL for Service Mocking of SSL Web Services.
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/exposeWSDL.gif" alt="soap testexpose WSDL">
				<div>
					<p><b>MockService WSDL Exposure</b></p>
					<p>
						In order to make soapUI Mocking even more like the real thing you are now able to expose the WSDL for all MockServices in soapUI.
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/MockStartScript.gif" alt="soap test mock star script">
				<div>
					<p><b>Mocking Start and Stop Scripts</b></p>
					<p>
						You are now able to run scripts at the start or stop of MockServices. 
						This gives you the ability to manipulate properties, context variables or other when you start or stop a MockService.
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/ProJectOverview.gif" alt="soap test manipulate properties">
				<div>
					<p><b>Project Overview</b></p>
					<p>
						When you double click a soapUI Project, you now get the soapUI Project Overview. This project overview will show;
						<ul>
							<li>Project Metrics</li>
							<li>Load Save Scripts</li>
						</ul>
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/TestSuiteLog_Small.gif" alt="testSuiteLog">
				<div>
					<p><b>TestSuite Editor run log</b></p>
					<p>
						Like TestCases before, TestSuites now sports a log window showing each step run in a TestCase.  Double Click any logged event in the TestSuite log to see the actual content of the step.
					</p>
 				</div>
			</newfeature>
			
			
			<newfeature img="images/2/TestCaseProperties.gif" alt="soap test Test Case Properties">
				<div>
					<p><b>Properties Management</b></p>
					<p>
					You are now able to create and use properties on the following levels;
						
						<ul>
							<li>Global Properties</li>
							<li>Project Properties</li>
							<li>TestSuite Properties</li>
							<li>TestCase Properties</li>
						</ul>
					</p>
					<p>
						Properties can then be used in levels below the property. That mean you are now able to share Properties such as user names and passwords in between for example TestCases.
					</p>
					<p>
					PropertyExpansions and PropertyTransfers have been extended accordingly. While the old TestStep properties remain unchanged the syntax of the new properties is extended. They now can refer to properties in other levels in the soapUI hierarchy by explicitly stating  
					which property at which level you are referring to. Properties now have the following Syntax;
					</p>
					</div>
					<div>
<source>
${#Scope#Property-name[#xpath-expression]}
					
${Property-name} refers to a Global Property (example: ${UserName} to a global Property named "UserName")
${#Project#Property-name}refers to a Project Property (example: ${#Project#UserName} to a Property on 
Project level named "UserName")
${#TestSuite#Property-name} refers to a TestSuite Property (example: ${#TestSuite#UserName} to a Property 
on TestSuite level named "UserName")
${#TestCase#Property-name} refers to a TestCase Property (example: ${#TestCase#UserName} to a Property 
on TestCase level named "UserName")
${TestStep-name#Property-name} refers to a property in a named TestStep.
</source>
					</div>
					<div>
					<p>
						The following rules apply:
						<ul>
							<li>Excepting TestSteps, you can only refer to properties in a path straight ascending from where you are</li>
							<li>Only TestSteps are referred to by name</li>
							<li>if you are running soapUI from command line, Global Properties will be overridden by file based Global Properties (read more about [<a href="userguide/properties.html#Built-In Properties">these here</a>])</li>
							</ul>
					</p>
					<p>
					You can drag a Property to an element in a TestRequest in order to create an automatic PropertyExpansion. You can also rename a Property without fear of breaking any tests; references to Properties automatically reactors themselves, rename a property and all PropertyExpansions will rename themselves.
					</p>
 				</div>
			</newfeature>	

			<newfeature img="images/2/properties_expand.gif" alt="soap test craeting automatic Property Expansion">
				<div>
					<p><b>Extended Properties view</b></p>
					<p>
					You can now have the ability to view properties directly in the tree navigator. This has two advantages
					<ol>
						<li>You are able to get better overview of the properties available</li>
						<li>You can drag a property from the tree to any Request element for an instant PropertyExpansion</li>
					</ol>
					The Extended Properties View is toggle able.
					</p>
 				</div>
			</newfeature>
			
			<newfeature img="images/2/TestCaseLogOptions.gif" alt="soap test extended properties view">
				<div>
					<p><b>TestCase Log improvements</b></p>
					<p>
					<ol>
						<li>In the TestCase Log you now can limit output and logged results to preserve memory under long running tests.</li>
						<li>You can also generate MockServices from TestCase execution</li>
					</ol>
					</p>
 				</div>
			</newfeature>
			
			<newfeature>
			    <div>Minor add ons and improvements;</div>
			    <ul>
			    <li>You can now start and stop MockServices from the soapUI Navigator by right clicking a MockService</li>
			    <li>Bundled version of soapUI in the soapUI Installer now is JDK 1.6.03</li>
			    <li>etc...</li>
			    </ul>
			</newfeature>			

		</subsection>
		<subsection name="New and Noteworthy in soapUI Pro">
		<p>On top of all the above, the following improvements/additions have been made to soapUI Pro:</p>
		
				<newfeature img="images/2/ProjectCoverage.gif" alt="soap test project coverage">
		<div>					
			<p><b>Web Service Coverage</b></p>
			<p>
			<br/>
				<ul STYLE="list-style-image: url(images/film.png)">
					<li><a href="#" onclick="openVideo('movies/WSDL_coverage/wsdl_coverage.html');"><b>View movie</b></a></li>
				</ul>
			<br/>
			</p>
			<p>
			As the first testing tool in the world soapUI releases support for WSDL Coverage analysis. 
			With one simple analysis run you can see how much of the WSDL contract that is covered by your tests, see a coverage report per request and 
			all the way down to which element is tested. This is integrated into the test development process and as you create tests you will 
			see the coverage increase.</p>
			<p>Coverage can be calculated on several levels:</p>
			<ul>
			<li>Functional Tests - calculate the WSDL coverage for your running tests, how much of the WSDL contract are you actually testing and asserting?</li>
			<li>MockServices - calculate the WSDL coverage for your MockServices, how much of the WSDL contract are you client sending in and mocks returning?</li>
			<li>Monitors - calculate the WSDL coverage on monitored traffic, how much of your WSDL contract are you actually using?</li>
			</ul>
			<p>Coverage information is updated in realtime and can be ongoing monitored during the above mentioned processes</p>
			<p>Also, a specialized Coverage Inspector is available for displaying an edited messages coverage:</p>
			<p align="center"><img src="images/2/MessageCoverage.gif" alt="soap test specialiaed coverage inspector"/></p>
			<p>
			This exclusive functionality will increase development quality, speed and make the Web Service testing faster than ever before.
			</p>
		</div>
		</newfeature>
		

		
		<newfeature img="images/2/refactorSchema.gif" alt="soap test refactor schema">
		<div>					
			<p><b>WSDL Refactoring</b></p>
			
			<p>
			<br/>
				<ul STYLE="list-style-image: url(images/film.png)">
					<li><a href="#" onclick="openVideo('movies/WSDL_Refactoring/WSDL_Refactoring.html');"><b>View movie</b></a></li>
				</ul>
			<br/>
			</p>
			<p>
			WSDL Refactoring enables you to refactor all your tests as the WSDL is updated. Run "Refactor Definition" on your 
			interface in order to update your tests. 
			WSDL Refactoring will take into account how the updated WSDL affects your XPath expressions.
			
			WSDL Refactoring will save you man hours upon man hours and will enable you to focus on writing tests, not updating them. 
			This makes soapUI a perfect tool for Agile Web Service Testing.
			</p>
		</div>
		</newfeature>
	

		<newfeature img="images/2/ProjectRequirements.gif" alt="soap test project requirements">
		<div>					
			<p><b>Requirements</b></p>
			<p>
			In soapUI 2.0 we introduce an efficient way of managing requirements and connecting these to the tests in soapUI. 
		
			Create or import requirements, choose which TestCases meets which requirements and see requirement fulfillment.
			
			soapUI Requirements is a welcome addition for the professional user, providing the opportunity to integrate your testing tool in the requirements management process.

			</p>
		</div>
		</newfeature>	

		<newfeature img="images/2/DataSink.gif" alt="integrating your testing tool in the requirements user tool">
		<div>					
			<p><b>DataSink TestStep</b></p>
			<p>
			In soapUI Pro you have earlier been able to get data for your functional testing by the DataSource TestStep, but not been able to put data from your test in a database.
			soapUI Pro 2.0 introduces the DataSink TestStep which enables you to put data from you’re your TestResponses in a database, Excel file or csv-file. 		
			</p>
		</div>
		</newfeature>
		
		<newfeature>
			    <div>Many minor add ons and improvements;</div>
			    <ul>
			    <li>Overview View now shows SOAP Headers</li>
			    <li>JDBC DataSource now supports Stored Procedures</li>
			    <li>etc...</li>
			    </ul>
			</newfeature>		

</subsection>	

		 <p><hr size="1"/></p>
		</section>
    </body>
</document>

