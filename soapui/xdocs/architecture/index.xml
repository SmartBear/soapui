<?xml version="1.0"?>
<document>
    <properties>
        <title>Open Source SOA Testing - building soapUI</title>
    </properties>
    <body>
		<section name="Building soapUI">
		 <p>soapUI is more or less a "standard" Java Swing application. It is built around a core object model
		 defined in the <code>com.eviware.soapui.core.*</code> packages and its WSDL implementation in the
		 <code>com.eviware.soapui.impl.wsdl.*</code> packages. The Javadocs give a short description of all packages
		 and classes, they are a good start to get an overview.</p>
		 <p>soapUI is built with <a target="_new" href="http://maven.apache.org">Maven 1.0.2</a> (Maven 2 will be 
		 supported in an upcoming release) and related project tools/methodologies/patterns.</p>
		 <p>To compile and run soapUI from the source do as follows:</p>
		 <ol>
		 <li>Download the source distribution from SourceForge</li>
		 <li>Unzip the file to some folder.</li>
		 <li>Start a command prompt and type <code>maven soapui:compile-and-run</code>. This will compile, test and 
		 run soapUI if everything goes OK</li>
		 </ol>
		 
		 <subsection name="Building soapUI from SVN">
		 <p>If you want to build the latest version of soapUI, you need to get the soapUI sources from its SourceForge
		 subversion repository located at <code>svn://svn.eviware.com/soapui/trunk/core</code>. Once you
		 have checked out the sources you should rebuild the XMLBeans classes used by soapUI to make sure you have up-to-date
		 versions on your local system; open a command-prompt in the soapUI directory and type 
		 <code>maven soapui:generate-xml-beans</code>, which will create all required classes for you. Now you can 
		 move on from step 3 in the above "Building soapUI" section.</p>
		 
		 </subsection>
		 
		 <subsection name="the soapUI Core Object Model">
		 <p>The core object model <code>com.eviware.soapui.core.*</code> packages define
		 all soapUI model objects (Projects, Interfaces, Operations, etc..) as abstract interfaces. The interfaces
		 are generally "read-only", modification of objects is implementation-dependant through actions that the implementations
		 provide (for example for renaming a request).</p>
		 <p>The <code>com.eviware.soapui.model.tree</code> defines the <code>TreeModel</code> used by the soapUI
		 navigator and its contained <code>SoapUITreeNode</code>s.</p>
		 <p>soapUI currently has no builder/factory mechanism for adding new implementations of the core model, 
		 the usage of the core-implementation for WSDL 1.1 (see below) is "hard coded" into the current Workspace 
		 implementation class (this should obviously be fixed).</p>
		 </subsection>
		 
		 <subsection name="SoapUI WSDL implementation">
		 <p>The WSDL/SOAP/HTTP-Binding implementation of the core object model is available in the 
		 <code>com.eviware.soapui.impl.wsdl.*</code> packages;</p>
		 <ul>
		 <li><code>com.eviware.soapui.impl.wsdl.*</code> : contains implementations for the core object model. Each 
		 implementation class is "bound" to a configuration-file element using the corresponding XMLBeans class as
		 described below (under "Configuration Files").</li>
		 <li><code>com.eviware.soapui.impl.wsdl.actions.*</code> : contains all actions for model item implementations</li>
		 <li><code>com.eviware.soapui.impl.wsdl.panels.*</code> : contains all panels for model item implementations</li>
		 <li><code>com.eviware.soapui.impl.wsdl.support</code> : contains WSDL/SOAP related support classes 
		 (validation, importing, etc)</li>
		 <li><code>com.eviware.soapui.impl.wsdl.teststeps.*</code> : contains available TestStep extensions together with
		 assertion-related classes</li>
		 </ul>
		 </subsection>
		 
		 <subsection name="Libraries Used in soapUI">
		 
		 <p>The following major libraries are used in soapUI:</p>
		 <ul>
		 	<li><a target="_new" href="http://xmlbeans.apache.org">XMLBeans 2.4.0</a> (ASL V2) is used for all
		 	XML/Schema processing/validation and SOAP message parsing/generation.</li>
		 	<li><a target="_new" href="http://sourceforge.net/projects/wsdl4j">WSDL4J 1.6.2</a> (CPL) is used for WSDL parsing</li>
		 	<li><a target="_new" href="http://jakarta.apache.org/commons/httpclient/">HttpClient 3.1</a> (ASL V2) is used for the posting of SOAP messages</li>
		 	<li><a target="_new" href="http://www.jgoodies.com">JGoodies Looks/Forms</a> (BSD) are used for 
		 	UI-enhancement (together with custom extensions)</li>
		 	<li><a target="_new" href="http://logging.apache.org/log4j/docs/index.html">log4j</a> (ASL V2) is used for logging</li>
		 	<li>a number of <a target="_new" href="http://jakarta.apache.org/commons/httpclient">Jakarta-commons</a> (ASL V2) libraries 
		 	are used for general functionality</li>
		 </ul>
		 <p>See a complete list of dependencies in the Maven <a href="../dependencies.html">dependencies report</a>.</p>
		 </subsection>

		 <subsection name="Configuration Files">
		 
		 <p> The 2 configuration file formats for workspaces and projects are defined in the <code>src/xsd/soapui.xsd</code>
		 schema and the corresponding XMLBeans objects are created using the custom Maven goal 
		 <code>maven soapui:generate-xml-beans</code>. The generated classes are available in the 
		 <code>com.eviware.soapui.config</code> package and all have their names extended with the
		 <code>Config</code> suffix to distinguish them from soapUI interfaces/classes.</p>
		 </subsection>
		 
		 <subsection name="XML Editor">
		 <p>The XMLEditor component used in soapUI is an extension of the 
		 <a target="_new" href="http://sourceforge.net/projects/jedit-syntax">jEdit Syntax</a> package adding
		 mouse-wheel, undo/redo and find/replace functionality. The extension class <code>JXmlTextArea</code> is
		 available in the <code>com.eviware.soapui.support</code> package.</p>
		 </subsection>
		 
		  <subsection name="Extension Points in soapUI">
		 <p>If you want to add new functionality, you could:</p>
		 <ul>
		 	<li>create new Assertions by extending the <code>WsdlAssertion</code> abstract base class (look at
		 	<code>SimpleContainsAssertion</code> for an example) and adding the extension to 
		 	<code>WsdlTestRequest</code></li>
		 	<li>create new Test Steps by extending the <code>WsdlTestStep</code> abstract base class (look at
		 	<code>TransferResponseValuesTestStep</code> for an example) and adding the extension to 
		 	<code>WsdlTestCase</code></li>
		 	<li>improve the <code>WsdlInterfaceDesktopPanel</code> with improved browsing/searching facilities.</li>
		 	<li>improve the xml-editor by extending the <code>JEditTextPane</code> class.</li>
		 	<li>etc...</li>
		 </ul>
		 
		 </subsection>
		 
		</section>
    </body>
</document>
