<?xml version="1.0" encoding="UTF-8"?>
	<!--
		~ SoapUI, copyright (C) 2004-2008 eviware.com ~ ~ SoapUI is free
		software; you can redistribute it and/or modify it under the ~ terms
		of version 2.1 of the GNU Lesser General Public License as published
		by ~ the Free Software Foundation. ~ ~ SoapUI is distributed in the
		hope that it will be useful, but WITHOUT ANY WARRANTY; without ~ even
		the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
		PURPOSE. ~ See the GNU Lesser General Public License for more details
		at gnu.org.
	-->


<document>
	<properties>
		<title>Tutorial for the AMF Test Step</title>
	</properties>
	<body>
		<section name="Getting started with the AMF TestStep">

			<subsection name="Step by step tutorial">
				<p>soapUI 3.5 introduces a new TestStep for sending AMF
					remote calls over HTTP (AMF being Adobes ActionScript
					Messaging
					Format used by Flash/Flex applications to interact with a server backend).</p>

				<p>
					In out blog entry <a href="http://www.eviware.com/blogs/oleblog/?p=861">Testing AMF services with SoapUI</a> you 
					could see how to use a Groovy Script to simulate an AMF call. The new AMF TestStep basically lets you 
					perform the same call without scripting and with access to all the XML-related bells-and-whistles (assertions, 
					property-transfers, etc) 
					
					In this introduction we will use the same BlazeDS platform
					<a href="http://opensource.adobe.com/wiki/display/blazeds/BlazeDS/">BlazeDS</a>
					and the same sample application. 
				</p>
			</subsection>


			<subsection name="Getting Started">
				<p>
					You will need to download <a href="images/flexsample.jar">flexsample.jar</a> provided here for the purpose of 
					this tutorial (it is also included in the blaze-ds distribution). Place this jar in the %soapui%\bin\ext
					folder and when starting soapUI 3.5 you should see in the soapUI log that the jar has been added to the internal 
					classpath :
		
					</p>
					<p align="center">
				<img src="images/ext_jar_loading.gif" alt="The soapUI External Jar Loading" />
			</p>
			<p>Now create a new soapUI project </p>
			<p align="center">
				<img src="images/new_soapui_project.gif" alt="Creating New SoapUI Project" />
			</p>
			<p>
				and then manually add a TestSuite, a TestCase and finally add an AMF Request TestStep.
			</p>
			<p align="center">
				<img src="images/amf_test_step_dialog.gif" alt="AMF Test Step Dialog" />
			</p>
			<p>The new AMF Request window contains the following components:</p>
			<p>For the Request:</p>
			<ul>
				<li>1.	Endpoint</li>
				<li>2.	AMF Call</li>
				<li>3.	Parameters table</li>
				<li>4.	Script editor</li>
				<li>5.	HTTP Header inspector</li>
				<li>6.	AMF Header inspector </li>
			</ul>
			
			<p>For the Response:</p>
			<ul>
				<li>7.	XML view</li>
				<li>8.	RAW view</li>
				<li>9.	Outline view</li>
				<li>10.	Overview view</li>
				<li>11.	HTTP Headers inspector</li>
				<li>12.	AMF Header inspector</li>
			</ul>
			<p>Using this window you can create calls to AMF services,
				first set your endpoint which for the sample application is<br/>
				http://127.0.0.1:8400/samples/messagebroker/amf
				, then add the AMF call product.getProducts.
				This getPoducts method in ProductService.java doesn't require parameters so
				we can just submit the call, make sure both your blazeDS sample database and server 
				are started you can submit this AMF call. Your response should look like this:</p>

	<p align="center">
		<img src="images/getproducts_response.gif" alt="AMF Response" />
	</p>
			
			<p>Now change the AMF Call to getProduct instead, which has one method
	parameter: the id number of product in database. Add the parameter to the parameters-table as follows:</p>

	<p align="center">
		<img src="images/getproduct_request.gif" alt="AMF Request" />
	</p>
			<p>
	Note that the order of parameters in our table should corresponds to the order of
	the method parameters of the AMF Call (names of your parameters in the table are not important). 
	When submitting this call you should see something like this :
</p>
	<p align="center">
		<img src="images/getproduct_response.gif" alt="AMF Response" />
	</p>
		
					<p>
	Now if you want to call product.create method you need to provide Product
	object as the method argument. So, how can you add a complex parameter of any
	type to the table? It is really simple with script editor; add one parameter in 
	our parameters table named product (or whatever you want) and leave the value blank.	
					
</p>
	<p align="center">
		<img src="images/create_request.gif" alt="AMF Request" />
	</p>
			
			<p>
	Next you use script editor to initialize new Product object and assign it to the "product" parameter.
</p>
	<p align="center">
		<img src="images/initialization_of_parameters.gif" alt="Script editor" />
	</p>


		<p>
		As you can see the script editor exposes a built in "parameters" variable which you can use for initialization of 
		your parameter values (not only complex ones). There is also an amfHeader variable with same functionality for initializing 
		complex objects in AMF Header inspector.
		</p>
		<p>
		Now you can submit this call, and your response should look something like this
		</p>

	<p align="center">
		<img src="images/response_with_headers.gif" alt="Response with HTTP Headers" />
	</p>

	
		
			</subsection>
<subsection name="Authorization ">
			
			<p>
		In soapUI 3.5 you can also login to secured AMF endpoints. For this purpose you need to do following: 
		Open your TestCase and click on the Options button.
		</p>
		
		<p align="center">
				<img src="images/authorisation.gif" alt="AMF Authorization" />
			</p>
			
				<p>
		In the AMF tab you can set whether you need to authorize or not to an AMF service for all AMF requests in your TestCase.
When choosing this you need to provide the AMD endpoint, login and password, which will be used when running the TestCase; 
it will login to the specified AMF service before the first TestStep and logout after last TestStep in the TestCase. The authorized 
AMF connection is shared among all AMF TestSteps in the Test Case.
			</p>
			
			<p>
			This tutorial should get you started with the new AMF TestStep in soapUI 3.5, please don't hesitate to give us your feedback so
			we can make this even better!</p>
			<p>Happy testing!</p>
			
</subsection>
		

			
		</section>
	</body>
</document>
